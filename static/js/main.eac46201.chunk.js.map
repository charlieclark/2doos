{"version":3,"sources":["types.ts","data/example.ts","utils/createGenericContext.tsx","utils/selectors.ts","hooks/useGlobalData.tsx","utils/prepareData.ts","hooks/useCurrentTodo.ts","hooks/useGlobalState.tsx","utils/components/ColumnInner.tsx","components/Board/components/ColOne.tsx","utils/components/TextEditor.tsx","utils/components/MarkdownEditor.tsx","components/Board/components/ColTwo.tsx","components/Board/components/ColThree.tsx","components/Board/Board.tsx","App.tsx","theme.ts","index.tsx","components/Board/components/ColTwo.module.scss","components/Board/components/ColThree.module.scss","components/Board/components/ColOne.module.scss","components/Board/Board.module.scss","utils/components/ColumnInner.module.scss","utils/components/TextEditor.module.scss","utils/components/MarkdownEditor.module.scss","App.module.scss"],"names":["DD_TYPES","inc","TIMELINE_GROUPS","map","todo","orderIndex","id","name","TG_ALL","TodoTypes","appendPrefix","type","getDragEventData","data","current","containerId","get","createGenericContext","genericContext","React","createContext","undefined","contextIsDefined","useContext","Error","Provider","doesTodoContainTodo","todoTree","todoId","children","some","child","todoTreeIsFolder","length","parentId","isUnfinishedTask","status","useGlobalDataContext","GlobalDataContextProvider","GlobalDataProvider","ls","storedTodos","setStoredTodosRaw","storedGroups","flatTodos","groups","todoDict","keyBy","parents","allChildren","todoTreeArray","groupsWithAll","todoGroupsTree","reduce","acc","group","forEach","push","sort","a","b","traverse","node","getParentsArray","timelineGroup","todoGroups","prepareData","setStoredTodos","todos","value","reorderGroupTodos","groupId","id1","id2","groupTodoIds","index1","findIndex","index2","newGroupTodoIndexes","arrayMove","index","reorderTodos","newData","moveIntoFolder","sourceId","destId","find","filter","addTodo","addToBottom","newTodo","notes","uuidv4","editTodo","changes","editTodos","ids","cb","includes","deleteTodo","useCurrentTodo","useParams","history","useHistory","updateCurrentTodo","useGlobalStateContext","GlobalStateContextProvider","GlobalStateProvider","activeDrag","setActiveDrag","clearActiveDrag","ColumnInner","bottomContents","outerContents","className","classNames","styles","container","scrollContents","Folder","indentation","listeners","isActive","isDraggingProject","project","isDroppable","todoProject","useDroppable","disabled","setNodeRef","unfinishedCount","isOver","style","paddingLeft","folderItem","ref","onClick","e","stopPropagation","left","Badge","color","badgeContent","showZero","folderIcon","items","todoTreeChild","ProjectInner","Project","replace","useSortable","attributes","transform","transition","CSS","Transform","toString","ColOne","projects","Button","variant","strategy","verticalListSortingStrategy","TextEditor","onChange","useState","localValue","updateLocalValue","isEditing","setIsEditing","commitChange","textArea","autoFocus","onBlur","target","onKeyPress","shiftKey","key","preventDefault","currentTarget","blur","preview","converter","Showdown","Converter","simpleLineBreaks","options","previewRender","text","makeHtml","autofocus","MarkdownEditor","initialValue","isPreview","setIsPreview","setValue","dangerouslySetInnerHTML","__html","button","TodoCellInner","startsWith","isChecked","Card","drag","iconWrapper","Checkbox","checked","nameEditor","newName","arrow","TodoCell","TodoStack","ColTwo","partition","folders","done","notDone","SpeedDial","ariaLabel","sx","position","bottom","right","icon","SpeedDialAction","tooltipTitle","header","newNotes","Divider","divider","folder","card","breadCrumbs","reverse","todoParent","carrat","link","middle","removePrefix","todoTimeline","TodoGroupHolderInner","isDroppableDisabled","todoTimelineGroup","Paper","elevation","emptyState","TodoGroupHolder","todoGroup","inner","groupHolder","groupTitle","ColThree","Object","values","Projects","sensors","useSensors","useSensor","PointerSensor","KeyboardSensor","coordinateGetter","sortableKeyboardCoordinates","currentTodoId","moveTodoGroup","leafIds","collisionDetection","closestCenter","onDragStart","event","active","onDragOver","over","activeData","overData","console","log","onDragEnd","row1","row2","row3","dropAnimation","Board","to","EmptyState","Nav","AppBar","nav","Toolbar","Typography","component","App","app","path","theme","createTheme","ReactDOM","render","ThemeProvider","CssBaseline","document","querySelector","module","exports"],"mappings":"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","file":"static/js/main.eac46201.chunk.js","sourcesContent":["import { get } from \"lodash\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nexport const TG_ALL = \"tg-all\";\n\nexport enum DD_TYPES {\n  project = \"project\",\n  todoProject = \"todoProject\",\n  todoTimeline = \"todoTimeline\",\n  todoTimelineGroup = \"todoTimelineGroup\",\n}\n\nexport type ActiveDrag = {\n  type: DD_TYPES;\n  id: string;\n  containerId?: string;\n};\n\nexport const appendPrefix = (id: string, type: DD_TYPES) => {\n  return `${type}-${id}`;\n};\n\nexport const containsPrefix = (id: string, type: DD_TYPES) =>\n  id.startsWith(`${type}-`);\n\nexport const removePrefix = (id: string, type: DD_TYPES) =>\n  id.replace(`${type}-`, \"\");\n\nexport const getDragEventData = ({ data }: { data: any }) => {\n  return {\n    type: data.current.type,\n    id: data.current.id,\n    containerId: get(data.current, \"sortable.containerId\"),\n  } as ActiveDrag;\n};\n\nexport enum TodoTypes {\n  todo = \"todo\",\n  folder = \"folder\",\n}\n\nexport type Todo = {\n  id: string;\n  name: string;\n  notes: string;\n  parentId?: string;\n  status?: \"done\";\n  timelineGroup?: string;\n  orderIndex: number;\n};\n\nexport type TodoEdit = Partial<\n  Pick<Todo, \"name\" | \"notes\" | \"status\" | \"timelineGroup\" | \"orderIndex\">\n>;\n\nexport type TodoCreate = Partial<Pick<Todo, \"name\" | \"notes\">>;\n\nexport type TodoTree = Todo & {\n  children: TodoTree[];\n  parents: string[];\n  allChildren: string[];\n};\n\nexport type TodoDict = {\n  [id: string]: TodoTree;\n};\n\nexport type TodoGroup = {\n  id: string;\n  name: string;\n};\n\nexport type TodoGroupsTree = {\n  [id: string]: string[];\n};\n\nexport const generateTodoTree = (todo: Omit<Todo, \"id\" | \"orderIndex\">) => {\n  return {\n    ...todo,\n    id: uuidv4(),\n    orderIndex: 0,\n  };\n};\n","import { Todo } from \"../types\";\n\nlet inc = 0;\n\nexport const TEST_DATA: Todo[] = [\n  // {\n  //   id: \"1\",\n  //   name: \"Project 1\",\n  //   notes: \"This is a root project\",\n  // },\n  // {\n  //   id: \"4\",\n  //   parentId: \"2\",\n  //   name: \"Item 2\",\n  //   notes: \"\",\n  // },\n  // {\n  //   id: \"2\",\n  //   parentId: \"1\",\n  //   name: \"Item 1\",\n  //   notes: \"\",\n  // },\n  // {\n  //   id: \"6\",\n  //   parentId: \"1\",\n  //   name: \"Item 6\",\n  //   notes: \"\",\n  // },\n  // {\n  //   id: \"7\",\n  //   parentId: \"1\",\n  //   name: \"Item 7\",\n  //   notes: \"\",\n  // },\n  // {\n  //   id: \"5\",\n  //   parentId: \"3\",\n  //   name: \"Item 3\",\n  //   notes: \"\",\n  // },\n  // {\n  //   id: \"3\",\n  //   name: \"Project 2\",\n  //   notes: \"This is a root project\",\n  // },\n].map((todo: any) => ({ ...todo, orderIndex: ++inc }));\n\nexport const TIMELINE_GROUPS = [\n  {\n    id: \"tg-1\",\n    name: \"Due Next\",\n  },\n];\n","import React from \"react\";\n\nexport const createGenericContext = <T extends unknown>() => {\n  // Create a context with a generic parameter or undefined\n  const genericContext = React.createContext<T | undefined>(undefined);\n\n  // Check if the value provided to the context is defined or throw an error\n  const useGenericContext = () => {\n    const contextIsDefined = React.useContext(genericContext);\n    if (!contextIsDefined) {\n      throw new Error(\"useGenericContext must be used within a Provider\");\n    }\n    return contextIsDefined;\n  };\n\n  return [useGenericContext, genericContext.Provider] as const;\n};\n","import { TodoDict, TodoTree } from \"types\";\n\nexport const doesTodoContainTodo = (\n  todoTree: TodoTree,\n  todoId: string\n): boolean => {\n  return (\n    todoTree.id === todoId ||\n    todoTree.children.some((child) => doesTodoContainTodo(child, todoId))\n  );\n};\n\nexport const todoTreeIsFolder = (todoTree: TodoTree) =>\n  !!todoTree.children.length || !todoTree.parentId;\n\nexport const isUnfinishedTask = (todoTree: TodoTree) => {\n  return !todoTreeIsFolder(todoTree) && todoTree.status !== \"done\";\n};\n\nexport const getAllLeafIds = (todoTree: TodoTree) => {\n  const traverse = (acc: string[], node: TodoTree): string[] => {\n    if (node.children && node.children.length) {\n      return node.children.reduce(traverse, acc);\n    }\n\n    acc.push(node.id);\n    return acc;\n  };\n\n  return traverse([], todoTree);\n};\n\nexport const getAllChildren = (todoTree: TodoTree) => {\n  const traverse = (acc: string[], node: TodoTree): string[] => {\n    if (node.children && node.children.length) {\n      acc.push(node.id);\n      return node.children.reduce(traverse, acc);\n    }\n    acc.push(node.id);\n    return acc;\n  };\n\n  return traverse([], todoTree);\n};\n\nexport const getParentsArray = (todoTree: TodoTree, todoDict: TodoDict) => {\n  const traverse = (acc: string[], node: TodoTree): string[] => {\n    if (node.parentId) {\n      acc.push(node.parentId);\n      return traverse(acc, todoDict[node.parentId]);\n    }\n    return acc;\n  };\n  return traverse([], todoTree);\n};\n","import * as React from \"react\";\nimport * as ls from \"local-storage\";\nimport { TEST_DATA, TIMELINE_GROUPS } from \"data/example\";\nimport {\n  TodoDict,\n  TodoTree,\n  generateTodoTree,\n  Todo,\n  TodoEdit,\n  TodoGroupsTree,\n  TodoGroup,\n  TodoCreate,\n} from \"types\";\nimport { createGenericContext } from \"utils/createGenericContext\";\nimport { prepareData } from \"utils/prepareData\";\nimport { arrayMove } from \"@dnd-kit/sortable\";\nimport { getAllChildren } from \"utils/selectors\";\n\ntype UseGlobalData = {\n  todoDict: TodoDict;\n  todoTreeArray: TodoTree[];\n  todoGroupsTree: TodoGroupsTree;\n  todoGroups: TodoGroup[];\n  reorderTodos: (id1: string, id2: string) => void;\n  reorderGroupTodos: (groupId: string, id1: string, id2: string) => void;\n  moveIntoFolder: (sourceId: string, destId: string) => void;\n  addTodo: (\n    parentId?: string,\n    data?: TodoCreate,\n    addToBottom?: boolean\n  ) => void;\n  editTodo: (id: string, changes: TodoEdit) => void;\n  editTodos: (\n    ids: string[],\n    cb: (todo: Todo, index: number) => TodoEdit\n  ) => void;\n  deleteTodo: (id: string) => void;\n};\n\nconst [useGlobalDataContext, GlobalDataContextProvider] =\n  createGenericContext<UseGlobalData>();\n\nconst GlobalDataProvider = ({ children }: { children: React.ReactNode }) => {\n  const [storedTodos, setStoredTodosRaw] = React.useState<Todo[]>(\n    ls.get(\"todos\") || []\n  );\n\n  const [storedGroups, setStoredGroups] =\n    React.useState<TodoGroup[]>(TIMELINE_GROUPS);\n\n  const { todoDict, todoTreeArray, todoGroups, todoGroupsTree } = prepareData(\n    storedTodos,\n    storedGroups\n  );\n\n  const setStoredTodos = (todos: Todo[]) => {\n    setStoredTodosRaw(todos);\n    ls.set(\"todos\", todos);\n  };\n\n  const reorderTodos = (id1: string, id2: string) => {\n    const index1 = storedTodos.findIndex((todo) => todo.id === id1);\n    const index2 = storedTodos.findIndex((todo) => todo.id === id2);\n\n    const newData = arrayMove(storedTodos, index1, index2);\n\n    setStoredTodos(newData);\n  };\n\n  const reorderGroupTodos = (groupId: string, id1: string, id2: string) => {\n    const groupTodoIds = todoGroupsTree[groupId];\n\n    const index1 = groupTodoIds.findIndex((todoId) => todoId === id1);\n    const index2 = groupTodoIds.findIndex((todoId) => todoId === id2);\n\n    const newGroupTodoIndexes: { [id: string]: { index: number } } = arrayMove(\n      groupTodoIds,\n      index1,\n      index2\n    ).reduce((acc, id, index) => ({ ...acc, [id]: { index } }), {});\n\n    setStoredTodos(\n      storedTodos.map((todo) => {\n        if (newGroupTodoIndexes[todo.id]) {\n          return {\n            ...todo,\n            orderIndex: newGroupTodoIndexes[todo.id].index,\n          };\n        }\n        return todo;\n      })\n    );\n  };\n\n  const moveIntoFolder = (sourceId: string, destId: string) => {\n    if (sourceId === destId) {\n      return;\n    }\n    setStoredTodos([\n      {\n        ...storedTodos.find((todo) => todo.id === sourceId)!,\n        parentId: destId,\n      },\n      ...storedTodos\n        .filter((todo) => todo.id !== sourceId)\n        .map((todo) => {\n          if (todo.id === destId) {\n            return { ...todo, status: undefined };\n          }\n          return todo;\n        }),\n    ]);\n  };\n\n  const addTodo = (\n    parentId?: string,\n    data?: TodoCreate,\n    addToBottom?: boolean\n  ) => {\n    const newTodo = generateTodoTree({\n      name: \"New Todo\",\n      notes: \"\",\n      parentId,\n      ...data,\n    });\n    setStoredTodos([\n      ...(!addToBottom ? [newTodo] : []),\n      ...storedTodos.map((todo) => {\n        if (todo.id === parentId) {\n          return { ...todo, status: undefined };\n        }\n        return todo;\n      }),\n      ...(addToBottom ? [newTodo] : []),\n    ]);\n  };\n\n  const editTodo = (id: string, changes: TodoEdit) => {\n    setStoredTodos(\n      storedTodos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            ...changes,\n          };\n        }\n        return todo;\n      })\n    );\n  };\n\n  const editTodos = (\n    ids: string[],\n    cb: (todo: Todo, index: number) => TodoEdit\n  ) => {\n    setStoredTodos(\n      storedTodos.map((todo, index) => {\n        if (ids.includes(todo.id)) {\n          return {\n            ...todo,\n            ...cb(todo, index),\n          };\n        }\n        return todo;\n      })\n    );\n  };\n\n  const deleteTodo = (id: string) => {\n    setStoredTodos(\n      storedTodos.filter((todo) => {\n        return !todoDict[id].allChildren.includes(todo.id);\n      })\n    );\n  };\n\n  return (\n    <GlobalDataContextProvider\n      value={{\n        todoDict,\n        todoTreeArray,\n        todoGroupsTree,\n        todoGroups,\n        reorderGroupTodos,\n        reorderTodos,\n        moveIntoFolder,\n        addTodo,\n        editTodo,\n        editTodos,\n        deleteTodo,\n      }}\n    >\n      {children}\n    </GlobalDataContextProvider>\n  );\n};\n\nexport { useGlobalDataContext, GlobalDataProvider };\n","import {\n  TodoTree,\n  Todo,\n  TodoDict,\n  TodoGroupsTree,\n  TG_ALL,\n  TodoGroup,\n} from \"types\";\nimport { keyBy } from \"lodash\";\nimport { getAllChildren, getParentsArray, todoTreeIsFolder } from \"./selectors\";\n\nexport const prepareData = (flatTodos: Todo[], groups: TodoGroup[]) => {\n  const todoDict: TodoDict = keyBy(\n    flatTodos.map((todo) => ({\n      ...todo,\n      children: [],\n      parents: [],\n      allChildren: [],\n    })),\n    \"id\"\n  );\n\n  const todoTreeArray: TodoTree[] = [];\n\n  const groupsWithAll = [...groups, { id: TG_ALL, name: \"All\" }];\n\n  const todoGroupsTree: TodoGroupsTree = groupsWithAll.reduce(\n    (acc, group) => ({ ...acc, [group.id]: [] }),\n    {}\n  );\n\n  flatTodos.forEach(({ id }) => {\n    const todo = todoDict[id];\n\n    if (todo.parentId) {\n      todoDict[todo.parentId].children.push(todo);\n    } else {\n      todoTreeArray.push(todo);\n    }\n  });\n\n  [...flatTodos]\n    .sort((a, b) => a.orderIndex - b.orderIndex)\n    .forEach((todo) => {\n      const parents = getParentsArray(todoDict[todo.id], todoDict);\n      const allChildren = getAllChildren(todoDict[todo.id]);\n      \n      todoDict[todo.id].parents = parents;\n      todoDict[todo.id].allChildren = allChildren;\n\n      if (todoTreeIsFolder(todoDict[todo.id])) {\n        return;\n      } else if (!todo.timelineGroup) {\n        todoGroupsTree[TG_ALL].push(todo.id);\n      } else {\n        todoGroupsTree[todo.timelineGroup] =\n          todoGroupsTree[todo.timelineGroup] || [];\n        todoGroupsTree[todo.timelineGroup].push(todo.id);\n      }\n    });\n\n  return { todoDict, todoTreeArray, todoGroupsTree, todoGroups: groupsWithAll };\n};\n","import { useParams, useHistory } from \"react-router-dom\";\nimport { useGlobalDataContext } from \"./useGlobalData\";\n\nconst useCurrentTodo = () => {\n  const { todo: todoId } = useParams() as { todo: string };\n  const { todoDict } = useGlobalDataContext();\n  const history = useHistory();\n  const updateCurrentTodo = (id: string) => {\n    history.push(`/${id}`);\n  };\n  return { todoId, todoTree: todoDict[todoId], updateCurrentTodo };\n};\n\nexport default useCurrentTodo;\n","import * as React from \"react\";\nimport { ActiveDrag, getDragEventData } from \"types\";\nimport { createGenericContext } from \"utils/createGenericContext\";\n\ntype UseGlobalState = {\n  activeDrag?: ActiveDrag;\n  setActiveDrag: (...args: Parameters<typeof getDragEventData>) => void;\n  clearActiveDrag: () => void;\n};\n\nconst [useGlobalStateContext, GlobalStateContextProvider] =\n  createGenericContext<UseGlobalState>();\n\nconst GlobalStateProvider = ({ children }: { children: React.ReactNode }) => {\n  const [activeDrag, setActiveDrag] = React.useState<ActiveDrag>();\n\n  return (\n    <GlobalStateContextProvider\n      value={{\n        activeDrag,\n        setActiveDrag: (data) => setActiveDrag(getDragEventData(data)),\n        clearActiveDrag: () => setActiveDrag(undefined),\n      }}\n    >\n      {children}\n    </GlobalStateContextProvider>\n  );\n};\n\nexport { useGlobalStateContext, GlobalStateProvider };\n","import classNames from \"classnames\";\nimport styles from \"./ColumnInner.module.scss\";\n\nconst ColumnInner = ({\n  bottomContents,\n  outerContents,\n  children,\n  className,\n}: {\n  className?: string;\n  bottomContents?: React.ReactNode;\n  outerContents?: React.ReactNode;\n  children: React.ReactNode;\n}) => {\n  return (\n    <div className={classNames(styles.container, className)}>\n      {outerContents}\n      <div className={styles.scrollContents}>{children}</div>\n      {bottomContents && (\n        <div className={styles.bottomContents}>{bottomContents}</div>\n      )}\n    </div>\n  );\n};\n\nexport default ColumnInner;\n","import { DragOverlay, useDroppable } from \"@dnd-kit/core\";\nimport {\n  SortableContext,\n  useSortable,\n  verticalListSortingStrategy,\n} from \"@dnd-kit/sortable\";\nimport useCurrentTodo from \"hooks/useCurrentTodo\";\nimport { useGlobalDataContext } from \"hooks/useGlobalData\";\nimport { DD_TYPES, TodoTree } from \"types\";\nimport {\n  doesTodoContainTodo,\n  isUnfinishedTask,\n  todoTreeIsFolder,\n} from \"utils/selectors\";\nimport { CSS } from \"@dnd-kit/utilities\";\nimport { useGlobalStateContext } from \"hooks/useGlobalState\";\nimport {\n  Badge,\n  Button,\n  Card,\n  List,\n  ListItemButton,\n  ListItemIcon,\n  ListItemText,\n} from \"@mui/material\";\nimport ColumnInner from \"utils/components/ColumnInner\";\nimport FolderOpenIcon from \"@mui/icons-material/FolderOpen\";\nimport DragIndicatorIcon from \"@mui/icons-material/DragIndicator\";\nimport styles from \"./ColOne.module.scss\";\nimport classNames from \"classnames\";\n\nconst Folder = ({\n  todoTree,\n  indentation = 0,\n  listeners,\n}: {\n  todoTree: TodoTree;\n  indentation?: number;\n  listeners?: any;\n}) => {\n  const { id, name, children, allChildren } = todoTree;\n  const { todoId, updateCurrentTodo } = useCurrentTodo();\n  const isActive = doesTodoContainTodo(todoTree, todoId);\n  const { activeDrag } = useGlobalStateContext();\n  const { todoDict } = useGlobalDataContext();\n\n  const isDraggingProject = activeDrag?.type === DD_TYPES.project;\n  const isDraggingValidTodoProject =\n    activeDrag?.type === DD_TYPES.todoProject &&\n    todoDict[activeDrag.id].parentId !== id &&\n    activeDrag.id !== id;\n\n  const isDroppable = isDraggingValidTodoProject;\n\n  const { setNodeRef, isOver } = useDroppable({\n    disabled: !isDroppable,\n    id: `col-one-folder-${id}`,\n    data: { type: DD_TYPES.project, id },\n  });\n\n  const unfinishedCount = allChildren.filter((id) =>\n    isUnfinishedTask(todoDict[id])\n  ).length;\n\n  return (\n    <>\n      <div style={{ paddingLeft: indentation * 10 }}>\n        <div\n          className={classNames(styles.folderItem, {\n            [styles.isDroppable]: isDroppable,\n            // [styles.isOver]: isOver,\n          })}\n          ref={setNodeRef}\n          onClick={(e) => {\n            e.stopPropagation();\n            updateCurrentTodo(id);\n          }}\n        >\n          <div className={styles.left}>\n            <Badge\n              color={unfinishedCount ? \"warning\" : \"success\"}\n              badgeContent={unfinishedCount}\n              showZero\n            >\n              <FolderOpenIcon className={styles.folderIcon} />\n            </Badge>\n            <div\n              className={classNames(styles.name, {\n                [styles.isActive]: isActive,\n              })}\n            >\n              {name}\n            </div>\n          </div>\n          {indentation === 0 && <DragIndicatorIcon {...listeners} />}\n        </div>\n      </div>\n      {(() => {\n        const items = children.filter(todoTreeIsFolder);\n        return (\n          !isDraggingProject &&\n          !!items.length && (\n            <div>\n              {items.map((todoTreeChild) => (\n                <Folder\n                  indentation={indentation + 1}\n                  key={todoTreeChild.id}\n                  todoTree={todoTreeChild}\n                />\n              ))}\n            </div>\n          )\n        );\n      })()}\n    </>\n  );\n};\n\nexport const ProjectInner = ({\n  id,\n  listeners,\n}: {\n  id: string;\n  listeners?: any;\n}) => {\n  const { todoDict } = useGlobalDataContext();\n  const todoId = id;\n\n  return <Folder todoTree={todoDict[todoId]} listeners={listeners} />;\n};\n\nconst Project = ({ id }: { id: string }) => {\n  const todoId = id.replace(\"project-\", \"\");\n\n  const { attributes, listeners, setNodeRef, transform, transition } =\n    useSortable({\n      id,\n      data: { type: DD_TYPES.project, id: todoId },\n    });\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n  };\n\n  return (\n    <div ref={setNodeRef} style={style} {...attributes}>\n      <ProjectInner id={todoId} listeners={listeners} />\n    </div>\n  );\n};\n\nconst ColOne = ({ className }: { className: string }) => {\n  const { todoTreeArray, addTodo } = useGlobalDataContext();\n\n  const projects = todoTreeArray.map(({ id }) => ({\n    id: `project-${id}`,\n  }));\n\n  return (\n    <ColumnInner\n      className={className}\n      bottomContents={\n        <Button\n          variant=\"contained\"\n          onClick={() => {\n            addTodo(undefined, { name: \"New Project\" }, true);\n          }}\n        >\n          Add project\n        </Button>\n      }\n    >\n      <SortableContext\n        id={\"reorder-projects\"}\n        items={projects}\n        strategy={verticalListSortingStrategy}\n      >\n        <div className={styles.projects}>\n          {projects.map(({ id }) => (\n            <Project key={id} id={id} />\n          ))}\n        </div>\n      </SortableContext>\n    </ColumnInner>\n  );\n};\n\nexport default ColOne;\n","import classNames from \"classnames\";\nimport React, { useState } from \"react\";\nimport styles from \"./TextEditor.module.scss\";\n\ntype Props = {\n  value: string;\n  onChange: (value: string) => void;\n  className?: string;\n};\n\nconst TextEditor = ({ value, onChange, className }: Props) => {\n  const [localValue, updateLocalValue] = useState<string>(value);\n  const [isEditing, setIsEditing] = useState(false);\n\n  const commitChange = () => {\n    onChange(localValue);\n    setIsEditing(false);\n  };\n\n  if (!isEditing) {\n    return (\n      <div\n        onClick={(e) => {\n          e.stopPropagation();\n          setIsEditing(true);\n        }}\n        className={classNames(className, styles.preview)}\n      >\n        {value}\n      </div>\n    );\n  }\n\n  return (\n    <textarea\n      className={styles.textArea}\n      autoFocus\n      onClick={(e) => e.stopPropagation()}\n      onBlur={commitChange}\n      value={localValue}\n      onChange={(e) => {\n        updateLocalValue(e.target.value);\n      }}\n      onKeyPress={(e) => {\n        if (!e.shiftKey && e.key === \"Enter\") {\n          e.preventDefault();\n          e.currentTarget.blur();\n          commitChange();\n        }\n      }}\n    />\n  );\n};\n\nexport default TextEditor;\n","import SimpleMDE, { SimpleMdeToCodemirrorEvents } from \"react-simplemde-editor\";\nimport \"easymde/dist/easymde.min.css\";\nimport { useMemo, useRef, useState } from \"react\";\n// import ReactMarkdown from \"react-markdown\";\nimport Showdown from \"showdown\";\nimport styles from \"./MarkdownEditor.module.scss\";\nimport classNames from \"classnames\";\nimport { Button } from \"@mui/material\";\n\nconst converter = new Showdown.Converter({ simpleLineBreaks: true });\n\nconst options = {\n  status: false,\n  previewRender: (text: string) => {\n    return converter.makeHtml(text);\n  },\n  autofocus: true,\n};\n\nconst MarkdownEditor = ({\n  value: initialValue,\n  onChange,\n  className,\n}: {\n  value: string;\n  onChange: (newValue: string) => void;\n  className?: string;\n}) => {\n  const [isPreview, setIsPreview] = useState(true);\n  const [value, setValue] = useState(initialValue);\n\n  const save = () => {\n    setIsPreview(true);\n    onChange(value);\n  };\n\n  // const { current: events } = useRef({\n  //   blur: save,\n  // });\n\n  if (isPreview) {\n    return (\n      <div\n        className={classNames(styles.preview, \"editor-preview\", className)}\n        onClick={() => setIsPreview(false)}\n        dangerouslySetInnerHTML={{\n          __html: converter.makeHtml(value || \"Add a description...\"),\n        }}\n      />\n    );\n  }\n\n  return (\n    <div className={className}>\n      <Button className={styles.button} variant=\"contained\" onClick={save}>\n        save\n      </Button>\n      <SimpleMDE options={options} value={value} onChange={setValue} />\n    </div>\n  );\n};\n\nexport default MarkdownEditor;\n","import {\n  Badge,\n  Button,\n  Card,\n  Checkbox,\n  Divider,\n  SpeedDial,\n  SpeedDialAction,\n  SpeedDialIcon,\n  Stack,\n} from \"@mui/material\";\n\nimport {\n  SortableContext,\n  useSortable,\n  verticalListSortingStrategy,\n} from \"@dnd-kit/sortable\";\n\nimport useCurrentTodo from \"hooks/useCurrentTodo\";\nimport { useGlobalDataContext } from \"hooks/useGlobalData\";\nimport { partition } from \"lodash\";\nimport { DD_TYPES, TodoTree, TodoTypes } from \"types\";\nimport { isUnfinishedTask, todoTreeIsFolder } from \"utils/selectors\";\nimport { DragOverlay } from \"@dnd-kit/core\";\nimport { useGlobalStateContext } from \"hooks/useGlobalState\";\nimport { CSS } from \"@dnd-kit/utilities\";\nimport TextEditor from \"utils/components/TextEditor\";\nimport MarkdownEditor from \"utils/components/MarkdownEditor\";\nimport ColumnInner from \"utils/components/ColumnInner\";\nimport styles from \"./ColTwo.module.scss\";\n\nimport AddIcon from \"@mui/icons-material/Add\";\nimport MoreHorizIcon from \"@mui/icons-material/MoreHoriz\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport FolderOpenIcon from \"@mui/icons-material/FolderOpen\";\nimport DragIndicatorIcon from \"@mui/icons-material/DragIndicator\";\nimport KeyboardArrowRightIcon from \"@mui/icons-material/KeyboardArrowRight\";\nimport classNames from \"classnames\";\n\nexport const TodoCellInner = ({\n  id,\n  listeners,\n}: {\n  id: string;\n  listeners?: any;\n}) => {\n  const { todoDict, editTodo, deleteTodo } = useGlobalDataContext();\n  const todo = todoDict[id];\n  const { name, status, children, allChildren } = todo;\n  const { updateCurrentTodo } = useCurrentTodo();\n\n  const { activeDrag } = useGlobalStateContext();\n\n  const isDroppable =\n    activeDrag &&\n    activeDrag.type === DD_TYPES.todoProject &&\n    activeDrag.containerId?.startsWith(TodoTypes.todo) &&\n    todoDict[id].children.length > 0 &&\n    activeDrag.id !== id;\n\n  const isChecked = children.length === 0 && status === \"done\";\n\n  const unfinishedCount = allChildren.filter((id) =>\n    isUnfinishedTask(todoDict[id])\n  ).length;\n\n  return (\n    <Card\n      className={classNames(styles.todo, {\n        [styles.isChecked]: isChecked,\n        [styles.isDroppable]: isDroppable,\n      })}\n    >\n      <div className={styles.left}>\n        <div className={styles.drag} {...listeners}>\n          <DragIndicatorIcon />\n        </div>\n        <div className={styles.iconWrapper}>\n          {!todoTreeIsFolder(todo) ? (\n            <Checkbox\n              checked={status === \"done\"}\n              onClick={(e) => {\n                e.stopPropagation();\n                editTodo(id, {\n                  status: status === \"done\" ? undefined : \"done\",\n                });\n              }}\n            />\n          ) : (\n            <Badge\n              color={unfinishedCount ? \"warning\" : \"success\"}\n              badgeContent={unfinishedCount}\n              showZero\n            >\n              <FolderOpenIcon className={styles.folderIcon} />\n            </Badge>\n          )}\n        </div>\n        <TextEditor\n          className={styles.nameEditor}\n          value={name}\n          onChange={(newName) => editTodo(id, { name: newName })}\n        />\n      </div>\n\n      <div className={styles.arrow} onClick={() => updateCurrentTodo(id)}>\n        <KeyboardArrowRightIcon />\n      </div>\n    </Card>\n  );\n};\n\nconst TodoCell = ({ id }: { id: string }) => {\n  const { attributes, listeners, setNodeRef, transform, transition } =\n    useSortable({ id, data: { type: DD_TYPES.todoProject, id } });\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n  };\n\n  return (\n    <div ref={setNodeRef} style={style} {...attributes}>\n      <TodoCellInner id={id} listeners={listeners} />\n    </div>\n  );\n};\n\nconst TodoStack = ({ todos, id }: { todos: TodoTree[]; id: string }) => {\n  return (\n    <>\n      <SortableContext\n        id={id}\n        items={todos}\n        strategy={verticalListSortingStrategy}\n      >\n        {todos.map(({ id: todoId }) => (\n          <TodoCell key={todoId} id={todoId} />\n        ))}\n      </SortableContext>\n    </>\n  );\n};\n\nconst ColTwo = ({ className }: { className: string }) => {\n  const {\n    todoTree: { name, children, id, notes },\n  } = useCurrentTodo();\n  const { addTodo, editTodo, deleteTodo } = useGlobalDataContext();\n  const [folders, todos] = partition(children, todoTreeIsFolder);\n  const [done, notDone] = partition(todos, (a) => a.status === \"done\");\n\n  return (\n    <ColumnInner\n      className={className}\n      outerContents={\n        <SpeedDial\n          ariaLabel=\"SpeedDial basic example\"\n          sx={{ position: \"absolute\", bottom: 16, right: 16 }}\n          icon={<MoreHorizIcon />}\n        >\n          <SpeedDialAction\n            onClick={() => addTodo(id)}\n            icon={<AddIcon />}\n            tooltipTitle={\"Add Sub Todo\"}\n          />\n          <SpeedDialAction\n            onClick={() => deleteTodo(id)}\n            icon={<DeleteIcon />}\n            tooltipTitle={\"Delete This Todo\"}\n          />\n        </SpeedDial>\n      }\n    >\n      <div className={styles.header}>\n        <TextEditor\n          className={styles.name}\n          value={name}\n          onChange={(newName) => editTodo(id, { name: newName })}\n        />\n      </div>\n      <MarkdownEditor\n        className={styles.notes}\n        value={notes}\n        onChange={(newNotes) => editTodo(id, { notes: newNotes })}\n      />\n      <Divider className={styles.divider} variant=\"middle\" />\n      <TodoStack id={TodoTypes.folder} todos={folders} />\n      <Divider className={styles.divider} variant=\"middle\" />\n      <TodoStack id={`${TodoTypes.todo}-notDone`} todos={notDone} />\n      <TodoStack id={`${TodoTypes.todo}-done`} todos={done} />\n    </ColumnInner>\n  );\n};\n\nexport default ColTwo;\n","import {\n  DndContext,\n  closestCenter,\n  KeyboardSensor,\n  PointerSensor,\n  useSensor,\n  useSensors,\n  DragOverlay,\n  useDroppable,\n} from \"@dnd-kit/core\";\nimport {\n  arrayMove,\n  sortableKeyboardCoordinates,\n  useSortable,\n  verticalListSortingStrategy,\n  SortableContext,\n} from \"@dnd-kit/sortable\";\nimport { Breadcrumbs, Card, Checkbox, Link, Paper } from \"@mui/material\";\nimport { TIMELINE_GROUPS } from \"data/example\";\nimport { useGlobalDataContext } from \"hooks/useGlobalData\";\nimport { get, partition } from \"lodash\";\nimport {\n  ActiveDrag,\n  appendPrefix,\n  DD_TYPES,\n  removePrefix,\n  TG_ALL,\n  TodoGroup,\n} from \"types\";\nimport { todoTreeIsFolder } from \"utils/selectors\";\nimport { CSS } from \"@dnd-kit/utilities\";\nimport { useState } from \"react\";\nimport { useGlobalStateContext } from \"hooks/useGlobalState\";\nimport useCurrentTodo from \"hooks/useCurrentTodo\";\nimport ColumnInner from \"utils/components/ColumnInner\";\nimport styles from \"./ColThree.module.scss\";\nimport DragIndicatorIcon from \"@mui/icons-material/DragIndicator\";\n\nexport const TodoCellInner = ({\n  id,\n  listeners,\n}: {\n  id: string;\n  listeners?: any;\n}) => {\n  const { todoDict, editTodo } = useGlobalDataContext();\n  const { updateCurrentTodo } = useCurrentTodo();\n  const todo = todoDict[id];\n  return (\n    <Card\n      className={styles.card}\n      onClick={() => {\n        updateCurrentTodo(id);\n      }}\n    >\n      <div className={styles.breadCrumbs}>\n        {[...todo.parents].reverse().map((todoParent) => (\n          <>\n            <div className={styles.carrat}>›</div>\n            <div\n              className={styles.link}\n              onClick={(e) => {\n                e.stopPropagation();\n                updateCurrentTodo(todoParent);\n              }}\n            >\n              {todoDict[todoParent].name}\n            </div>\n          </>\n        ))}\n      </div>\n      <div className={styles.middle}>\n        <div className={styles.iconWrapper} {...listeners}>\n          <DragIndicatorIcon />\n        </div>\n\n        <div className={styles.name}>{todo.name}</div>\n        <div className={styles.iconWrapper}>\n          <Checkbox\n            onClick={(e) => {\n              e.stopPropagation();\n              editTodo(id, { status: \"done\" });\n            }}\n          />\n        </div>\n      </div>\n    </Card>\n  );\n};\n\nconst TodoCell = ({ id, disabled }: { id: string; disabled?: boolean }) => {\n  const todoId = removePrefix(id, DD_TYPES.todoTimeline);\n\n  const { attributes, listeners, setNodeRef, transform, transition } =\n    useSortable({\n      id,\n      data: { type: DD_TYPES.todoTimeline, id: todoId },\n      disabled,\n    });\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n  };\n\n  return (\n    <div ref={setNodeRef} style={style} {...attributes}>\n      <TodoCellInner id={todoId} listeners={listeners} />\n    </div>\n  );\n};\n\nconst TodoGroupHolderInner = ({\n  items,\n  id,\n}: {\n  items: string[];\n  id: string;\n}) => {\n  const { activeDrag } = useGlobalStateContext();\n  const { todoGroupsTree } = useGlobalDataContext();\n\n  const isDroppableDisabled =\n    activeDrag &&\n    activeDrag.type === DD_TYPES.todoTimeline &&\n    todoGroupsTree[id].includes(activeDrag.id);\n\n  const { setNodeRef } = useDroppable({\n    id: appendPrefix(id, DD_TYPES.todoTimelineGroup),\n    disabled: isDroppableDisabled,\n\n    data: {\n      type: DD_TYPES.todoTimelineGroup,\n      id,\n    },\n  });\n\n  return (\n    <div ref={setNodeRef}>\n      {items.length ? (\n        items.map((todoId) => <TodoCell key={todoId} id={todoId} />)\n      ) : (\n        <Paper elevation={0} className={styles.emptyState}>\n          Drag a task to get started\n        </Paper>\n      )}\n    </div>\n  );\n};\n\nconst TodoGroupHolder = ({\n  todoGroup: { id, name },\n}: {\n  todoGroup: TodoGroup;\n}) => {\n  const { todoGroupsTree, todoDict } = useGlobalDataContext();\n\n  const items = todoGroupsTree[id]\n    .filter((todoId) => todoDict[todoId].status !== \"done\")\n    .map((todoId) => appendPrefix(todoId, DD_TYPES.todoTimeline));\n\n  const inner = (\n    <div>\n      <SortableContext\n        id={id}\n        items={items}\n        strategy={verticalListSortingStrategy}\n      >\n        <TodoGroupHolderInner items={items} id={id} />\n      </SortableContext>\n    </div>\n  );\n\n  if (id === TG_ALL) {\n    return inner;\n  }\n\n  return (\n    <Card className={styles.groupHolder}>\n      <div className={styles.groupTitle}>{name}</div>\n      {inner}\n    </Card>\n  );\n};\n\nconst ColThree = ({ className }: { className: string }) => {\n  const { todoGroups } = useGlobalDataContext();\n\n  return (\n    <ColumnInner className={className}>\n      {Object.values(todoGroups).map((todoGroup) => (\n        <TodoGroupHolder key={todoGroup.id} todoGroup={todoGroup} />\n      ))}\n    </ColumnInner>\n  );\n};\n\nexport default ColThree;\n","import { Redirect } from \"react-router-dom\";\nimport { useGlobalDataContext } from \"hooks/useGlobalData\";\nimport styles from \"./Board.module.scss\";\nimport ColOne, { ProjectInner } from \"./components/ColOne\";\nimport ColTwo, {\n  TodoCellInner as TodoCellInnerColTwo,\n} from \"./components/ColTwo\";\nimport ColThree, {\n  TodoCellInner as TodoCellInnerColThree,\n} from \"./components/ColThree\";\nimport {\n  DndContext,\n  closestCenter,\n  KeyboardSensor,\n  PointerSensor,\n  useSensor,\n  useSensors,\n  DragOverlay,\n} from \"@dnd-kit/core\";\nimport {\n  arrayMove,\n  SortableContext,\n  sortableKeyboardCoordinates,\n  verticalListSortingStrategy,\n} from \"@dnd-kit/sortable\";\nimport { useGlobalStateContext } from \"hooks/useGlobalState\";\nimport { get } from \"lodash\";\nimport {\n  ActiveDrag,\n  DD_TYPES,\n  getDragEventData,\n  removePrefix,\n  TG_ALL,\n  TodoTypes,\n} from \"types\";\nimport useCurrentTodo from \"hooks/useCurrentTodo\";\nimport { getAllLeafIds } from \"utils/selectors\";\nimport ColumnInner from \"utils/components/ColumnInner\";\n\nconst Projects = () => {\n  const sensors = useSensors(\n    useSensor(PointerSensor),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    })\n  );\n\n  const { todoId: currentTodoId } = useCurrentTodo();\n  const { setActiveDrag, clearActiveDrag, activeDrag } =\n    useGlobalStateContext();\n  const {\n    todoGroupsTree,\n    reorderTodos,\n    moveIntoFolder,\n    editTodo,\n    editTodos,\n    reorderGroupTodos,\n    todoDict,\n  } = useGlobalDataContext();\n\n  const moveTodoGroup = (todoId: string, groupId: string) => {\n    const leafIds = getAllLeafIds(todoDict[todoId]);\n\n    editTodos(leafIds, (todo, index) => ({\n      timelineGroup: groupId === TG_ALL ? undefined : groupId,\n      orderIndex: todoGroupsTree[groupId].length + index,\n    }));\n  };\n\n  return (\n    <DndContext\n      sensors={sensors}\n      collisionDetection={closestCenter}\n      onDragStart={(event) => {\n        setActiveDrag(event.active);\n      }}\n      onDragOver={(event) => {\n        const { active, over } = event;\n\n        if (!over) {\n          return;\n        }\n\n        const activeData = getDragEventData(active);\n        const overData = getDragEventData(over);\n\n        if (activeData.type === DD_TYPES.todoTimeline) {\n          if (activeData.containerId === overData.containerId) {\n            return;\n          } else if (overData.containerId) {\n            console.log(\"move ovr container inner\", overData.containerId);\n            moveTodoGroup(activeData.id, overData.containerId);\n          } else if (activeData.containerId !== overData.id) {\n            console.log(\"move ovr container\", overData.id);\n            moveTodoGroup(activeData.id, overData.id);\n          }\n        }\n      }}\n      onDragEnd={(event) => {\n        const { active, over } = event;\n\n        clearActiveDrag();\n\n        if (!over) {\n          return;\n        }\n\n        const activeData = getDragEventData(active);\n        const overData = getDragEventData(over);\n\n        if (activeData.type === DD_TYPES.project) {\n          if (overData.type === DD_TYPES.project) {\n            reorderTodos(activeData.id, overData.id);\n          } else if (\n            overData.type === DD_TYPES.todoTimelineGroup ||\n            overData.type === DD_TYPES.todoTimeline\n          ) {\n            const groupId = overData.containerId || overData.id;\n            moveTodoGroup(activeData.id, groupId);\n          }\n        } else if (activeData.type === DD_TYPES.todoProject) {\n          if (overData.type === DD_TYPES.todoProject) {\n            if (activeData.containerId === overData.containerId) {\n              reorderTodos(activeData.id, overData.id);\n            } else if (\n              activeData.containerId?.startsWith(TodoTypes.todo) &&\n              overData.containerId?.startsWith(TodoTypes.folder)\n            ) {\n              moveIntoFolder(activeData.id, overData.id);\n            }\n          } else if (overData.type === DD_TYPES.project) {\n            moveIntoFolder(active.id, overData.id);\n          } else if (\n            overData.type === DD_TYPES.todoTimelineGroup ||\n            overData.type === DD_TYPES.todoTimeline\n          ) {\n            const groupId = overData.containerId || overData.id;\n            moveTodoGroup(activeData.id, groupId);\n          }\n        } else if (activeData.type === DD_TYPES.todoTimeline) {\n          if (overData.type === DD_TYPES.todoTimeline && overData.containerId) {\n            reorderGroupTodos(\n              activeData.containerId!,\n              activeData.id,\n              overData.id\n            );\n          }\n        }\n      }}\n    >\n      <ColOne className={styles.row1} />\n      <ColTwo className={styles.row2} key={currentTodoId} />\n      <ColThree className={styles.row3} />\n      <DragOverlay dropAnimation={null}>\n        {activeDrag ? (\n          activeDrag.type === DD_TYPES.project ? (\n            <ProjectInner id={activeDrag.id} />\n          ) : activeDrag.type === DD_TYPES.todoProject ? (\n            <TodoCellInnerColTwo id={activeDrag.id} />\n          ) : (\n            <TodoCellInnerColThree id={activeDrag.id} />\n          )\n        ) : null}\n      </DragOverlay>\n    </DndContext>\n  );\n};\n\nconst Board = () => {\n  const { todoTree } = useCurrentTodo();\n  if (!todoTree) {\n    return <Redirect to=\"/\" />;\n  }\n  return (\n    <div className={styles.container}>\n      <Projects />\n    </div>\n  );\n};\n\nexport default Board;\n","import {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\nimport Board from \"components/Board\";\nimport { GlobalDataProvider, useGlobalDataContext } from \"hooks/useGlobalData\";\nimport { GlobalStateProvider } from \"hooks/useGlobalState\";\nimport styles from \"./App.module.scss\";\nimport { AppBar, Toolbar, Typography } from \"@mui/material\";\n\nconst EmptyState = () => {\n  const { todoTreeArray, addTodo } = useGlobalDataContext();\n  return (\n    <>\n      {todoTreeArray.length ? (\n        <Redirect to={`/${todoTreeArray[0].id}`} />\n      ) : (\n        <div\n          onClick={() => {\n            addTodo(undefined, { name: \"My First Project\" });\n          }}\n        >\n          Create first project\n        </div>\n      )}\n    </>\n  );\n};\n\nconst Nav = () => {\n  return (\n    <AppBar position=\"static\" className={styles.nav}>\n      <Toolbar variant=\"dense\">\n        <Typography variant=\"h6\" color=\"inherit\" component=\"div\">\n          2doos\n        </Typography>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nconst App = () => {\n  return (\n    <Router>\n      <GlobalStateProvider>\n        <GlobalDataProvider>\n          <Nav />\n          <div className={styles.app}>\n            <Switch>\n              <Route path=\"/:todo\">\n                <Board />\n              </Route>\n              <Route path=\"/\">\n                <EmptyState />\n              </Route>\n            </Switch>\n          </div>\n        </GlobalDataProvider>\n      </GlobalStateProvider>\n    </Router>\n  );\n};\n\nexport default App;\n","import { createTheme } from '@mui/material/styles';\nimport { red } from '@mui/material/colors';\n\n// A custom theme for this app\nconst theme = createTheme({\n  // palette: {\n  //   primary: {\n  //     main: '#556cd6',\n  //   },\n  //   secondary: {\n  //     main: '#19857b',\n  //   },\n  //   error: {\n  //     main: red.A400,\n  //   },\n  // },\n});\n\nexport default theme;\n","import * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport { ThemeProvider } from '@mui/material/styles';\nimport App from './App';\nimport theme from './theme';\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n    <CssBaseline />\n    <App />\n  </ThemeProvider>,\n  document.querySelector('#root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"name\":\"ColTwo_name__2_rLL\",\"notes\":\"ColTwo_notes__clwpS\",\"divider\":\"ColTwo_divider__3eTYs\",\"todo\":\"ColTwo_todo__1v3br\",\"isDroppable\":\"ColTwo_isDroppable__28zgJ\",\"isChecked\":\"ColTwo_isChecked__3pTbR\",\"nameEditor\":\"ColTwo_nameEditor__3q7j3\",\"drag\":\"ColTwo_drag__22hhO\",\"left\":\"ColTwo_left__1f5nn\",\"iconWrapper\":\"ColTwo_iconWrapper__312dt\",\"arrow\":\"ColTwo_arrow__3lzuY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"groupHolder\":\"ColThree_groupHolder__1Ss44\",\"groupTitle\":\"ColThree_groupTitle__1pUVL\",\"emptyState\":\"ColThree_emptyState__3Nzun\",\"card\":\"ColThree_card__3wcyg\",\"breadCrumbs\":\"ColThree_breadCrumbs__3A_kT\",\"carrat\":\"ColThree_carrat__2PdV4\",\"link\":\"ColThree_link__22D8h\",\"iconWrapper\":\"ColThree_iconWrapper__1Aj9H\",\"middle\":\"ColThree_middle__3mKBZ\",\"name\":\"ColThree_name__1GxuL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"projects\":\"ColOne_projects__2O4cp\",\"folderItem\":\"ColOne_folderItem__2tLhO\",\"isDroppable\":\"ColOne_isDroppable__9-sYQ\",\"isOver\":\"ColOne_isOver__1Y2xD\",\"left\":\"ColOne_left__13IKl\",\"name\":\"ColOne_name__2cKUT\",\"isActive\":\"ColOne_isActive__3_yZW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Board_container__15NyP\",\"row1\":\"Board_row1__1nHv1\",\"row2\":\"Board_row2__TNkut\",\"row3\":\"Board_row3__eGlZY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ColumnInner_container__14jds\",\"scrollContents\":\"ColumnInner_scrollContents__2Caoi\",\"bottomContents\":\"ColumnInner_bottomContents__3kxeg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preview\":\"TextEditor_preview__102VY\",\"textArea\":\"TextEditor_textArea__1GovB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preview\":\"MarkdownEditor_preview__3zJyZ\",\"button\":\"MarkdownEditor_button__29LfO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"App_nav__UeHIZ\",\"app\":\"App_app__2ziFi\"};"],"sourceRoot":""}