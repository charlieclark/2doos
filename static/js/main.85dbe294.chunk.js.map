{"version":3,"sources":["components/Board/Board.module.scss","data/example.ts","hooks/useGlobalData.tsx","utils/createGenericContext.tsx","utils/prepareData.ts","components/Board/Board.tsx","App.tsx","theme.ts","index.tsx"],"names":["module","exports","TEST_DATA","id","name","notes","type","timelineOrderIndex","parentId","genericContext","React","createContext","undefined","contextIsDefined","useContext","Error","Provider","createGenericContext","useGlobalDataContext","GlobalDataContextProvider","GlobalDataProvider","children","storedTodos","flatTodos","todoDict","keyBy","map","todo","todoDictCloned","cloneDeep","todoTreeArray","Object","values","forEach","push","todoTree","prepareData","value","Board","className","styles","container","row1","row2","row3","App","theme","createTheme","ReactDOM","render","ThemeProvider","CssBaseline","document","querySelector"],"mappings":"8IACAA,EAAOC,QAAU,CAAC,UAAY,yBAAyB,KAAO,oBAAoB,KAAO,oBAAoB,KAAO,sB,oGCCvGC,EAAoB,CAC/B,CACEC,GAAI,IACJC,KAAM,MACNC,MAAO,wBACPC,KAAM,SACNC,mBAAoB,GAEtB,CACEJ,GAAI,IACJK,SAAU,IACVJ,KAAM,MACNC,MAAO,wBACPC,KAAM,OACNC,mBAAoB,GAEtB,CACEJ,GAAI,IACJK,SAAU,IACVJ,KAAM,MACNC,MAAO,wBACPC,KAAM,OACNC,mBAAoB,I,uBCbxB,ECToC,WAElC,IAAME,EAAiBC,IAAMC,mBAA6BC,GAW1D,MAAO,CARmB,WACxB,IAAMC,EAAmBH,IAAMI,WAAWL,GAC1C,IAAKI,EACH,MAAM,IAAIE,MAAM,oDAElB,OAAOF,GAGkBJ,EAAeO,UDH1CC,GADF,mBAAOC,EAAP,KAA6BC,EAA7B,KAGMC,EAAqB,SAAC,GAAiD,IAA/CC,EAA8C,EAA9CA,SAC5B,EAAsCX,WAAeR,GAArD,mBAAOoB,EAAP,KAEA,GAFA,KEZyB,SAACC,GAC1B,IAAMC,EAAqBC,gBACzBF,EAAUG,KAAI,SAACC,GAAD,mBAAC,eAAeA,GAAhB,IAAsBN,SAAU,QAC9C,MAGIO,EAAiBC,oBAAUL,GAC3BM,EAA4B,GAYlC,OAVAC,OAAOC,OAAOJ,GAAgBK,SAAQ,SAACN,GACjCA,EAAKnB,SACPoB,EAAeD,EAAKnB,UAAUa,SAASa,KAAKP,GAE5CG,EAAcI,KAAKP,MAMhB,CAAEH,WAAUW,SAFFL,EAAc,IFHAM,CAAYd,IAAnCE,EAAR,EAAQA,SAAUW,EAAlB,EAAkBA,SAElB,OACE,cAAChB,EAAD,CAA2BkB,MAAO,CAAEb,WAAUW,YAA9C,SACGd,K,iBGLQiB,EAbD,WACZ,IAAQd,EAAaN,IAAbM,SACR,OACE,sBAAKe,UAAWC,IAAOC,UAAvB,UACE,qBAAKF,UAAWC,IAAOE,KAAvB,SACGX,OAAOC,OAAOR,GAAUE,KAAI,SAACC,GAAD,OAAUA,EAAKxB,QAE9C,qBAAKoC,UAAWC,IAAOG,OACvB,qBAAKJ,UAAWC,IAAOI,WCCdC,EARH,WACV,OACE,cAAC,EAAD,UACE,cAAC,EAAD,O,QCWSC,EAdDC,YAAY,ICG1BC,IAASC,OACP,eAACC,EAAA,EAAD,CAAeJ,MAAOA,EAAtB,UAEE,cAACK,EAAA,EAAD,IACA,cAAC,EAAD,OAEFC,SAASC,cAAc,Y","file":"static/js/main.85dbe294.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Board_container__15NyP\",\"row1\":\"Board_row1__1nHv1\",\"row2\":\"Board_row2__TNkut\",\"row3\":\"Board_row3__eGlZY\"};","import { Todo } from \"../types\";\n\nexport const TEST_DATA: Todo[] = [\n  {\n    id: \"1\",\n    name: \"All\",\n    notes: \"This is the root note\",\n    type: \"folder\",\n    timelineOrderIndex: 0,\n  },\n  {\n    id: \"4\",\n    parentId: \"2\",\n    name: \"All\",\n    notes: \"This is the root note\",\n    type: \"todo\",\n    timelineOrderIndex: 0,\n  },\n  {\n    id: \"2\",\n    parentId: \"1\",\n    name: \"All\",\n    notes: \"This is the root note\",\n    type: \"todo\",\n    timelineOrderIndex: 0,\n  },\n];\n","import * as React from \"react\";\nimport { TEST_DATA } from \"data/example\";\nimport { TodoDict, TodoTree } from \"types\";\nimport { createGenericContext } from \"utils/createGenericContext\";\nimport { prepareData } from \"utils/prepareData\";\n\ntype UseGlobalData = {\n  todoDict: TodoDict;\n  todoTree: TodoTree;\n};\n\nconst [useGlobalDataContext, GlobalDataContextProvider] =\n  createGenericContext<UseGlobalData>();\n\nconst GlobalDataProvider = ({ children }: { children: React.ReactNode }) => {\n  const [storedTodos, setStoredTodos] = React.useState(TEST_DATA);\n\n  const { todoDict, todoTree } = prepareData(storedTodos);\n\n  return (\n    <GlobalDataContextProvider value={{ todoDict, todoTree }}>\n      {children}\n    </GlobalDataContextProvider>\n  );\n};\n\nexport { useGlobalDataContext, GlobalDataProvider };\n","import React from \"react\";\n\nexport const createGenericContext = <T extends unknown>() => {\n  // Create a context with a generic parameter or undefined\n  const genericContext = React.createContext<T | undefined>(undefined);\n\n  // Check if the value provided to the context is defined or throw an error\n  const useGenericContext = () => {\n    const contextIsDefined = React.useContext(genericContext);\n    if (!contextIsDefined) {\n      throw new Error(\"useGenericContext must be used within a Provider\");\n    }\n    return contextIsDefined;\n  };\n\n  return [useGenericContext, genericContext.Provider] as const;\n};\n","import { TodoTree, Todo, TodoDict } from \"types\";\nimport { keyBy, cloneDeep } from \"lodash\";\n\nexport const prepareData = (flatTodos: Todo[]) => {\n  const todoDict: TodoDict = keyBy(\n    flatTodos.map((todo) => ({ ...todo, children: [] })),\n    \"id\"\n  );\n\n  const todoDictCloned = cloneDeep(todoDict);\n  const todoTreeArray: TodoTree[] = [];\n\n  Object.values(todoDictCloned).forEach((todo) => {\n    if (todo.parentId) {\n      todoDictCloned[todo.parentId].children.push(todo);\n    } else {\n      todoTreeArray.push(todo);\n    }\n  });\n\n  const todoTree = todoTreeArray[0];\n\n  return { todoDict, todoTree };\n};\n","import { useGlobalDataContext } from \"hooks/useGlobalData\";\nimport styles from \"./Board.module.scss\";\n\nconst Board = () => {\n  const { todoDict } = useGlobalDataContext();\n  return (\n    <div className={styles.container}>\n      <div className={styles.row1}>\n        {Object.values(todoDict).map((todo) => todo.id)}\n      </div>\n      <div className={styles.row2}></div>\n      <div className={styles.row3}></div>\n    </div>\n  );\n};\n\nexport default Board;\n","import styles from \"./App.module.scss\";\nimport Board from \"components/Board\";\nimport { GlobalDataProvider } from \"hooks/useGlobalData\";\n\nconst App = () => {\n  return (\n    <GlobalDataProvider>\n      <Board />\n    </GlobalDataProvider>\n  );\n};\n\nexport default App;\n","import { createTheme } from '@mui/material/styles';\nimport { red } from '@mui/material/colors';\n\n// A custom theme for this app\nconst theme = createTheme({\n  // palette: {\n  //   primary: {\n  //     main: '#556cd6',\n  //   },\n  //   secondary: {\n  //     main: '#19857b',\n  //   },\n  //   error: {\n  //     main: red.A400,\n  //   },\n  // },\n});\n\nexport default theme;\n","import * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport { ThemeProvider } from '@mui/material/styles';\nimport App from './App';\nimport theme from './theme';\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n    <CssBaseline />\n    <App />\n  </ThemeProvider>,\n  document.querySelector('#root'),\n);\n"],"sourceRoot":""}