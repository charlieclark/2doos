{"version":3,"sources":["types.ts","data/example.ts","utils/createGenericContext.tsx","utils/selectors.ts","hooks/useGlobalData.tsx","utils/prepareData.ts","hooks/useGlobalState.tsx","hooks/useCurrentTodo.ts","utils/components/ColumnInner.tsx","utils/getIconForTodo.tsx","components/Board/components/ColOne.tsx","utils/components/TextEditor.tsx","utils/components/MarkdownEditor.tsx","components/Board/components/ColTwo.tsx","components/Board/components/ColThree.tsx","components/Board/Board.tsx","utils/components/SearchBar.tsx","App.tsx","theme.ts","index.tsx","components/Board/components/ColThree.module.scss","components/Board/components/ColTwo.module.scss","components/Board/components/ColOne.module.scss","components/Board/Board.module.scss","utils/components/ColumnInner.module.scss","utils/components/TextEditor.module.scss","utils/components/MarkdownEditor.module.scss","App.module.scss"],"names":["DD_TYPES","inc","TIMELINE_GROUPS","map","todo","orderIndex","id","name","BOARD_ID","TG_ALL","TodoTypes","appendPrefix","type","getDragEventData","data","current","containerId","get","createGenericContext","genericContext","React","createContext","undefined","contextIsDefined","useContext","Error","Provider","todoTreeIsBoard","todoTree","todoTreeIsProject","parentId","todoTreeParentIsBoard","todoTreeIsFolder","children","length","todoTreeIsTask","todoTreeIsUnfinishedTask","status","useGlobalDataContext","GlobalDataContextProvider","BASE_TODOS","notes","GlobalDataProvider","ls","storedTodos","setStoredTodosRaw","storedGroups","setStoredGroupsRaw","flatTodos","groups","todoDict","keyBy","parents","allChildren","todoTreeArray","groupsWithAll","todoGroupsTree","reduce","acc","group","forEach","push","sort","a","b","traverse","node","getParentsArray","timelineGroup","todoGroups","prepareData","setStoredTodos","todos","setStoredGroups","value","reorderGroupTodos","groupId","id1","id2","groupTodoIds","index1","findIndex","todoId","index2","newGroupTodoIndexes","arrayMove","index","reorderTodos","newData","moveIntoFolder","sourceId","destId","find","filter","addTodo","addToBottom","newTodo","uuidv4","editTodo","changes","editTodos","ids","cb","includes","deleteTodo","addTodoGroup","editTodoGroup","reorderTodoGroup","direction","deleteTodoGroup","useGlobalStateContext","GlobalStateContextProvider","GlobalStateProvider","activeDrag","setActiveDrag","activeSearch","setActiveSearch","isSearchFocused","setIsSearchFocused","isShowingKanban","setIsShowingKanban","clearActiveDrag","clearActiveSearch","useCurrentTodo","useParams","history","useHistory","updateCurrentTodo","ColumnInner","bottomContents","outerContents","className","classNames","styles","container","scrollContents","getIconForTodo","DashboardIcon","FolderOpenIcon","ListIcon","CheckBoxIcon","Folder","indentation","isActive","isDraggingProject","project","isDroppable","todoProject","useDroppable","disabled","setNodeRef","isOver","isBoard","unfinishedCountAll","unfinishedCount","useCount","Icon","ref","style","paddingLeft","folderItem","onClick","e","stopPropagation","left","Badge","invisible","color","badgeContent","variant","folderIcon","isProject","items","todoTreeChild","ProjectInner","ColOne","Button","projects","TextEditor","onChange","useState","localValue","updateLocalValue","isEditing","setIsEditing","commitChange","textArea","autoFocus","onBlur","target","onKeyPress","shiftKey","key","preventDefault","currentTarget","blur","preview","converter","Showdown","Converter","simpleLineBreaks","options","previewRender","text","makeHtml","autofocus","MarkdownEditor","initialValue","isPreview","setIsPreview","setValue","dangerouslySetInnerHTML","__html","button","TodoCellInner","listeners","attributes","startsWith","isChecked","Card","drag","iconWrapper","Checkbox","checked","nameEditor","newName","arrow","TodoCell","useSortable","transform","transition","over","CSS","Transform","toString","TodoStack","strategy","verticalListSortingStrategy","ColTwo","partition","folders","done","notDone","SpeedDial","ariaLabel","sx","position","bottom","right","icon","SpeedDialAction","tooltipTitle","header","newNotes","Divider","divider","folder","isSearch","card","breadCrumbs","reverse","todoParent","carrat","link","middle","cursor","iconNonCheck","replace","removePrefix","todoTimeline","TodoGroupHolderInner","isDroppableDisabled","todoTimelineGroup","isReallyOver","holderInnerWrapper","Paper","elevation","emptyState","TodoGroupHolder","todoGroup","inner","groupHolder","groupTitle","title","delete","fontSize","sortArrows","sortArrow","SearchScreen","search","todosToShow","Object","values","toLowerCase","Box","pt","overflow","height","Container","searchWrapper","ColThree","useGroups","groupHolderWrapper","Projects","sensors","useSensors","useSensor","PointerSensor","KeyboardSensor","coordinateGetter","sortableKeyboardCoordinates","currentTodoId","moveTodoGroup","leafIds","collisionDetection","closestCorners","onDragStart","event","active","onDragOver","activeData","overData","onDragEnd","row1","row2","row3","dropAnimation","Board","to","Search","styled","theme","borderRadius","shape","backgroundColor","alpha","palette","common","white","marginRight","spacing","marginLeft","width","breakpoints","up","SearchIconWrapper","padding","pointerEvents","display","alignItems","justifyContent","StyledInputBase","InputBase","transitions","create","PrimarySearchAppBar","placeholder","onFocus","EmptyState","Nav","AppBar","nav","Toolbar","Typography","component","flexGrow","IconButton","App","app","path","createTheme","ReactDOM","render","ThemeProvider","CssBaseline","document","querySelector","module","exports"],"mappings":"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","file":"static/js/main.419ec233.chunk.js","sourcesContent":["import { get } from \"lodash\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nexport const BOARD_ID = \"board\";\nexport const TG_ALL = \"tg-all\";\n\nexport enum DD_TYPES {\n  project = \"project\",\n  todoProject = \"todoProject\",\n  todoTimeline = \"todoTimeline\",\n  todoTimelineGroup = \"todoTimelineGroup\",\n  todoTimelineGroupReorder = \"todoTimelineGroupReorder\",\n}\n\nexport type ActiveDrag = {\n  type: DD_TYPES;\n  id: string;\n  containerId?: string;\n};\n\nexport const appendPrefix = (id: string, type: DD_TYPES) => {\n  return `${type}-${id}`;\n};\n\nexport const containsPrefix = (id: string, type: DD_TYPES) =>\n  id.startsWith(`${type}-`);\n\nexport const removePrefix = (id: string, type: DD_TYPES) =>\n  id.replace(`${type}-`, \"\");\n\nexport const getDragEventData = ({ data }: { data: any }) => {\n  return {\n    type: data.current.type,\n    id: data.current.id,\n    containerId: get(data.current, \"sortable.containerId\"),\n  } as ActiveDrag;\n};\n\nexport enum TodoTypes {\n  todo = \"todo\",\n  folder = \"folder\",\n}\n\nexport type Todo = {\n  id: string;\n  name: string;\n  notes: string;\n  parentId?: string;\n  status?: \"done\";\n  timelineGroup?: string;\n  orderIndex: number;\n};\n\nexport type TodoEdit = Partial<\n  Pick<Todo, \"name\" | \"notes\" | \"status\" | \"timelineGroup\" | \"orderIndex\">\n>;\n\nexport type TodoCreate = Partial<Pick<Todo, \"name\" | \"notes\">>;\n\nexport type TodoTree = Todo & {\n  children: TodoTree[];\n  parents: string[];\n  allChildren: string[];\n};\n\nexport type TodoDict = {\n  [id: string]: TodoTree;\n};\n\nexport const generateTodoTree = (todo: Omit<Todo, \"id\" | \"orderIndex\">) => {\n  return {\n    ...todo,\n    id: uuidv4(),\n    orderIndex: 0,\n  };\n};\n\n// GROUP stuff\n\nexport type TodoGroup = {\n  id: string;\n  name: string;\n};\n\nexport type TodoGroupCreate = Pick<TodoGroup, \"name\">;\nexport type TodoGroupEdit = Partial<Pick<TodoGroup, \"name\">>;\n\nexport type TodoGroupsTree = {\n  [id: string]: string[];\n};\n","import { Todo } from \"../types\";\n\nlet inc = 0;\n\nexport const TEST_DATA: Todo[] = [\n  // {\n  //   id: \"1\",\n  //   name: \"Project 1\",\n  //   notes: \"This is a root project\",\n  // },\n  // {\n  //   id: \"4\",\n  //   parentId: \"2\",\n  //   name: \"Item 2\",\n  //   notes: \"\",\n  // },\n  // {\n  //   id: \"2\",\n  //   parentId: \"1\",\n  //   name: \"Item 1\",\n  //   notes: \"\",\n  // },\n  // {\n  //   id: \"6\",\n  //   parentId: \"1\",\n  //   name: \"Item 6\",\n  //   notes: \"\",\n  // },\n  // {\n  //   id: \"7\",\n  //   parentId: \"1\",\n  //   name: \"Item 7\",\n  //   notes: \"\",\n  // },\n  // {\n  //   id: \"5\",\n  //   parentId: \"3\",\n  //   name: \"Item 3\",\n  //   notes: \"\",\n  // },\n  // {\n  //   id: \"3\",\n  //   name: \"Project 2\",\n  //   notes: \"This is a root project\",\n  // },\n].map((todo: any) => ({ ...todo, orderIndex: ++inc }));\n\nexport const TIMELINE_GROUPS = [\n  {\n    id: \"tg-1\",\n    name: \"Todo Next\",\n  },\n];\n","import React from \"react\";\n\nexport const createGenericContext = <T extends unknown>() => {\n  // Create a context with a generic parameter or undefined\n  const genericContext = React.createContext<T | undefined>(undefined);\n\n  // Check if the value provided to the context is defined or throw an error\n  const useGenericContext = () => {\n    const contextIsDefined = React.useContext(genericContext);\n    if (!contextIsDefined) {\n      throw new Error(\"useGenericContext must be used within a Provider\");\n    }\n    return contextIsDefined;\n  };\n\n  return [useGenericContext, genericContext.Provider] as const;\n};\n","import { BOARD_ID, TodoDict, TodoTree } from \"types\";\n\nexport const doesTodoContainTodo = (\n  todoTree: TodoTree,\n  todoId: string\n): boolean => {\n  return (\n    todoTree.id === todoId ||\n    todoTree.children.some((child) => doesTodoContainTodo(child, todoId))\n  );\n};\n\nexport const todoTreeIsBoard = (todoTree: TodoTree) => todoTree.id === BOARD_ID;\nexport const todoTreeParentIsBoard = (todoTree: TodoTree) =>\n  todoTree.parentId === BOARD_ID;\n\nexport const todoTreeIsProject = (todoTree: TodoTree) =>\n  todoTreeParentIsBoard(todoTree);\n\nexport const todoTreeIsFolder = (todoTree: TodoTree) =>\n  !!todoTree.children.length || !todoTree.parentId;\n\nexport const todoTreeIsTask = (todoTree: TodoTree) => {\n  return !(todoTreeIsFolder(todoTree) || todoTreeIsProject(todoTree));\n};\n\nexport const todoTreeIsUnfinishedTask = (todoTree: TodoTree) => {\n  return todoTreeIsTask(todoTree) && todoTree.status !== \"done\";\n};\n\nexport const getAllLeafIds = (todoTree: TodoTree) => {\n  const traverse = (acc: string[], node: TodoTree): string[] => {\n    if (node.children && node.children.length) {\n      return node.children.reduce(traverse, acc);\n    }\n\n    acc.push(node.id);\n    return acc;\n  };\n\n  return traverse([], todoTree);\n};\n\nexport const getAllChildren = (todoTree: TodoTree) => {\n  const traverse = (acc: string[], node: TodoTree): string[] => {\n    if (node.children && node.children.length) {\n      acc.push(node.id);\n      return node.children.reduce(traverse, acc);\n    }\n    acc.push(node.id);\n    return acc;\n  };\n\n  return traverse([], todoTree);\n};\n\nexport const getParentsArray = (todoTree: TodoTree, todoDict: TodoDict) => {\n  const traverse = (acc: string[], node: TodoTree): string[] => {\n    if (node.parentId) {\n      acc.push(node.parentId);\n      return traverse(acc, todoDict[node.parentId]);\n    }\n    return acc;\n  };\n  return traverse([], todoTree);\n};\n","import * as React from \"react\";\nimport * as ls from \"local-storage\";\nimport { TEST_DATA, TIMELINE_GROUPS } from \"data/example\";\nimport {\n  TodoDict,\n  TodoTree,\n  generateTodoTree,\n  Todo,\n  TodoEdit,\n  TodoGroupsTree,\n  TodoGroup,\n  TodoCreate,\n  BOARD_ID,\n  TodoGroupEdit,\n  TodoGroupCreate,\n} from \"types\";\nimport { createGenericContext } from \"utils/createGenericContext\";\nimport { prepareData } from \"utils/prepareData\";\nimport { arrayMove } from \"@dnd-kit/sortable\";\nimport { getAllChildren } from \"utils/selectors\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { useGlobalStateContext } from \"./useGlobalState\";\n\ntype UseGlobalData = {\n  todoDict: TodoDict;\n  todoTreeArray: TodoTree[];\n  todoGroupsTree: TodoGroupsTree;\n  todoGroups: TodoGroup[];\n  reorderTodos: (id1: string, id2: string) => void;\n  reorderGroupTodos: (groupId: string, id1: string, id2: string) => void;\n  moveIntoFolder: (sourceId: string, destId: string) => void;\n  addTodo: (\n    parentId?: string,\n    data?: TodoCreate,\n    addToBottom?: boolean\n  ) => void;\n  editTodo: (id: string, changes: TodoEdit) => void;\n  editTodos: (\n    ids: string[],\n    cb: (todo: Todo, index: number) => TodoEdit\n  ) => void;\n  deleteTodo: (id: string) => void;\n  addTodoGroup: (data: TodoGroupCreate) => void;\n  editTodoGroup: (id: string, changes: TodoGroupEdit) => void;\n  reorderTodoGroup: (id: string, direction: \"up\" | \"down\") => void;\n  deleteTodoGroup: (id: string) => void;\n};\n\nconst [useGlobalDataContext, GlobalDataContextProvider] =\n  createGenericContext<UseGlobalData>();\n\nconst BASE_TODOS: Todo[] = [\n  {\n    name: \"My Board\",\n    id: BOARD_ID,\n    notes: \"\",\n    orderIndex: 0,\n  },\n];\n\nconst GlobalDataProvider = ({ children }: { children: React.ReactNode }) => {\n  const [storedTodos, setStoredTodosRaw] = React.useState<Todo[]>(\n    ls.get(\"todos\") || BASE_TODOS\n  );\n\n  const [storedGroups, setStoredGroupsRaw] = React.useState<TodoGroup[]>(\n    ls.get(\"todoGroups\") || TIMELINE_GROUPS\n  );\n\n  const { todoDict, todoTreeArray, todoGroups, todoGroupsTree } = prepareData(\n    storedTodos,\n    storedGroups\n  );\n\n  const setStoredTodos = (todos: Todo[]) => {\n    setStoredTodosRaw(todos);\n    ls.set(\"todos\", todos);\n  };\n\n  const setStoredGroups = (todoGroups: TodoGroup[]) => {\n    setStoredGroupsRaw(todoGroups);\n    ls.set(\"todoGroups\", todoGroups);\n  };\n\n  const reorderTodos = (id1: string, id2: string) => {\n    const index1 = storedTodos.findIndex((todo) => todo.id === id1);\n    const index2 = storedTodos.findIndex((todo) => todo.id === id2);\n\n    const newData = arrayMove(storedTodos, index1, index2);\n\n    setStoredTodos(newData);\n  };\n\n  const reorderGroupTodos = (groupId: string, id1: string, id2: string) => {\n    const groupTodoIds = todoGroupsTree[groupId];\n\n    const index1 = groupTodoIds.findIndex((todoId) => todoId === id1);\n    const index2 = groupTodoIds.findIndex((todoId) => todoId === id2);\n\n    const newGroupTodoIndexes: { [id: string]: { index: number } } = arrayMove(\n      groupTodoIds,\n      index1,\n      index2\n    ).reduce((acc, id, index) => ({ ...acc, [id]: { index } }), {});\n\n    setStoredTodos(\n      storedTodos.map((todo) => {\n        if (newGroupTodoIndexes[todo.id]) {\n          return {\n            ...todo,\n            orderIndex: newGroupTodoIndexes[todo.id].index,\n          };\n        }\n        return todo;\n      })\n    );\n  };\n\n  const moveIntoFolder = (sourceId: string, destId: string) => {\n    if (sourceId === destId) {\n      return;\n    }\n    setStoredTodos([\n      {\n        ...storedTodos.find((todo) => todo.id === sourceId)!,\n        parentId: destId,\n      },\n      ...storedTodos\n        .filter((todo) => todo.id !== sourceId)\n        .map((todo) => {\n          if (todo.id === destId) {\n            return { ...todo, status: undefined };\n          }\n          return todo;\n        }),\n    ]);\n  };\n\n  const addTodo = (\n    parentId?: string,\n    data?: TodoCreate,\n    addToBottom?: boolean\n  ) => {\n    const newTodo = generateTodoTree({\n      name: \"New Task\",\n      notes: \"\",\n      parentId,\n      ...data,\n    });\n    setStoredTodos([\n      ...(!addToBottom ? [newTodo] : []),\n      ...storedTodos.map((todo) => {\n        if (todo.id === parentId) {\n          return { ...todo, status: undefined };\n        }\n        return todo;\n      }),\n      ...(addToBottom ? [newTodo] : []),\n    ]);\n  };\n\n  const editTodo = (id: string, changes: TodoEdit) => {\n    setStoredTodos(\n      storedTodos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            ...changes,\n          };\n        }\n        return todo;\n      })\n    );\n  };\n\n  const editTodos = (\n    ids: string[],\n    cb: (todo: Todo, index: number) => TodoEdit\n  ) => {\n    setStoredTodos(\n      storedTodos.map((todo, index) => {\n        if (ids.includes(todo.id)) {\n          return {\n            ...todo,\n            ...cb(todo, index),\n          };\n        }\n        return todo;\n      })\n    );\n  };\n\n  const deleteTodo = (id: string) => {\n    setStoredTodos(\n      storedTodos.filter((todo) => {\n        return !todoDict[id].allChildren.includes(todo.id);\n      })\n    );\n  };\n\n  const addTodoGroup = (data: TodoGroupCreate) => {\n    setStoredGroups([...storedGroups, { id: uuidv4(), ...data }]);\n  };\n  const editTodoGroup = (id: string, changes: TodoGroupEdit) => {\n    setStoredGroups(\n      storedGroups.map((group) => {\n        if (group.id === id) {\n          return { ...group, ...changes };\n        }\n        return group;\n      })\n    );\n  };\n  const reorderTodoGroup = (id: string, direction: \"up\" | \"down\") => {\n    const index1 = storedGroups.findIndex((group) => group.id === id);\n    const index2 = index1 + (direction === \"up\" ? -1 : 1);\n\n    const newData = arrayMove(storedGroups, index1, index2);\n\n    setStoredGroups(newData);\n  };\n\n  const deleteTodoGroup = (id: string) => {\n    setStoredGroups(storedGroups.filter((group) => group.id !== id));\n    setStoredTodos(\n      storedTodos.map((todo) => {\n        if (todo.timelineGroup === id) {\n          return { ...todo, timelineGroup: undefined };\n        }\n        return todo;\n      })\n    );\n  };\n\n  return (\n    <GlobalDataContextProvider\n      value={{\n        todoDict,\n        todoTreeArray,\n        todoGroupsTree,\n        todoGroups,\n        reorderGroupTodos,\n        reorderTodos,\n        moveIntoFolder,\n        addTodo,\n        editTodo,\n        editTodos,\n        deleteTodo,\n        addTodoGroup,\n        editTodoGroup,\n        reorderTodoGroup,\n        deleteTodoGroup,\n      }}\n    >\n      {children}\n    </GlobalDataContextProvider>\n  );\n};\n\nexport { useGlobalDataContext, GlobalDataProvider };\n","import {\n  TodoTree,\n  Todo,\n  TodoDict,\n  TodoGroupsTree,\n  TG_ALL,\n  TodoGroup,\n} from \"types\";\nimport { keyBy } from \"lodash\";\nimport { getAllChildren, getParentsArray, todoTreeIsFolder } from \"./selectors\";\n\nexport const prepareData = (flatTodos: Todo[], groups: TodoGroup[]) => {\n  const todoDict: TodoDict = keyBy(\n    flatTodos.map((todo) => ({\n      ...todo,\n      children: [],\n      parents: [],\n      allChildren: [],\n    })),\n    \"id\"\n  );\n\n  const todoTreeArray: TodoTree[] = [];\n\n  const groupsWithAll = [...groups, { id: TG_ALL, name: \"All\" }];\n\n  const todoGroupsTree: TodoGroupsTree = groupsWithAll.reduce(\n    (acc, group) => ({ ...acc, [group.id]: [] }),\n    {}\n  );\n\n  flatTodos.forEach(({ id }) => {\n    const todo = todoDict[id];\n\n    if (todo.parentId) {\n      todoDict[todo.parentId].children.push(todo);\n    } else {\n      todoTreeArray.push(todo);\n    }\n  });\n\n  [...flatTodos]\n    .sort((a, b) => a.orderIndex - b.orderIndex)\n    .forEach((todo) => {\n      const parents = getParentsArray(todoDict[todo.id], todoDict);\n      const allChildren = getAllChildren(todoDict[todo.id]);\n      \n      todoDict[todo.id].parents = parents;\n      todoDict[todo.id].allChildren = allChildren;\n\n      if (todoTreeIsFolder(todoDict[todo.id])) {\n        return;\n      } else if (!todo.timelineGroup) {\n        todoGroupsTree[TG_ALL].push(todo.id);\n      } else {\n        todoGroupsTree[todo.timelineGroup] =\n          todoGroupsTree[todo.timelineGroup] || [];\n        todoGroupsTree[todo.timelineGroup].push(todo.id);\n      }\n    });\n\n  return { todoDict, todoTreeArray, todoGroupsTree, todoGroups: groupsWithAll };\n};\n","import * as React from \"react\";\nimport { ActiveDrag, getDragEventData } from \"types\";\nimport { createGenericContext } from \"utils/createGenericContext\";\n\ntype UseGlobalState = {\n  activeDrag?: ActiveDrag;\n  setActiveDrag: (...args: Parameters<typeof getDragEventData>) => void;\n  clearActiveDrag: () => void;\n  activeSearch?: string;\n  isSearchFocused?: boolean;\n  isShowingKanban?: boolean;\n  setIsSearchFocused: (isFocused: boolean) => void;\n  setActiveSearch: (search: string) => void;\n  clearActiveSearch: () => void;\n  setIsShowingKanban: (show: boolean) => void;\n};\n\nconst [useGlobalStateContext, GlobalStateContextProvider] =\n  createGenericContext<UseGlobalState>();\n\nconst GlobalStateProvider = ({ children }: { children: React.ReactNode }) => {\n  const [activeDrag, setActiveDrag] = React.useState<ActiveDrag>();\n  const [activeSearch, setActiveSearch] = React.useState<string>();\n  const [isSearchFocused, setIsSearchFocused] = React.useState<boolean>();\n  const [isShowingKanban, setIsShowingKanban] = React.useState<boolean>();\n\n  return (\n    <GlobalStateContextProvider\n      value={{\n        activeDrag,\n        setActiveDrag: (data) => setActiveDrag(getDragEventData(data)),\n        clearActiveDrag: () => setActiveDrag(undefined),\n        activeSearch,\n        setActiveSearch,\n        clearActiveSearch: () => setActiveSearch(\"\"),\n        isSearchFocused,\n        setIsSearchFocused,\n        isShowingKanban,\n        setIsShowingKanban,\n      }}\n    >\n      {children}\n    </GlobalStateContextProvider>\n  );\n};\n\nexport { useGlobalStateContext, GlobalStateProvider };\n","import { useParams, useHistory } from \"react-router-dom\";\nimport { useGlobalDataContext } from \"./useGlobalData\";\nimport { useGlobalStateContext } from \"./useGlobalState\";\n\nconst useCurrentTodo = () => {\n  const { todo: todoId } = useParams() as { todo: string };\n  const { todoDict } = useGlobalDataContext();\n  const { clearActiveSearch, setIsShowingKanban } = useGlobalStateContext();\n  const history = useHistory();\n  const updateCurrentTodo = (id: string) => {\n    clearActiveSearch();\n    setIsShowingKanban(false);\n    history.push(`/${id}`);\n  };\n  return { todoId, todoTree: todoDict[todoId], updateCurrentTodo };\n};\n\nexport default useCurrentTodo;\n","import classNames from \"classnames\";\nimport styles from \"./ColumnInner.module.scss\";\n\nconst ColumnInner = ({\n  bottomContents,\n  outerContents,\n  children,\n  className,\n}: {\n  className?: string;\n  bottomContents?: React.ReactNode;\n  outerContents?: React.ReactNode;\n  children: React.ReactNode;\n}) => {\n  return (\n    <div className={classNames(styles.container, className)}>\n      {outerContents}\n      <div className={styles.scrollContents}>{children}</div>\n      {bottomContents && (\n        <div className={styles.bottomContents}>{bottomContents}</div>\n      )}\n    </div>\n  );\n};\n\nexport default ColumnInner;\n","import FolderOpenIcon from \"@mui/icons-material/FolderOpen\";\nimport DashboardIcon from \"@mui/icons-material/Dashboard\";\nimport ListIcon from \"@mui/icons-material/List\";\nimport CheckBoxIcon from \"@mui/icons-material/CheckBox\";\nimport { TodoTree } from \"types\";\nimport {\n  todoTreeIsBoard,\n  todoTreeIsFolder,\n  todoTreeIsProject,\n} from \"./selectors\";\n\nconst getIconForTodo = (todoTree: TodoTree) => {\n  if (todoTreeIsBoard(todoTree)) {\n    return DashboardIcon;\n  }\n  if (todoTreeIsProject(todoTree)) {\n    return FolderOpenIcon;\n  }\n\n  if (todoTreeIsFolder(todoTree)) {\n    return ListIcon;\n  }\n\n  return CheckBoxIcon;\n};\n\nexport default getIconForTodo;\n","import { DragOverlay, useDroppable } from \"@dnd-kit/core\";\nimport {\n  SortableContext,\n  useSortable,\n  verticalListSortingStrategy,\n} from \"@dnd-kit/sortable\";\nimport useCurrentTodo from \"hooks/useCurrentTodo\";\nimport { useGlobalDataContext } from \"hooks/useGlobalData\";\nimport { BOARD_ID, DD_TYPES, TodoTree } from \"types\";\nimport {\n  doesTodoContainTodo,\n  todoTreeIsUnfinishedTask,\n  todoTreeIsFolder,\n  todoTreeIsProject,\n} from \"utils/selectors\";\nimport { CSS } from \"@dnd-kit/utilities\";\nimport { useGlobalStateContext } from \"hooks/useGlobalState\";\nimport {\n  Badge,\n  Button,\n  Card,\n  Chip,\n  List,\n  ListItemButton,\n  ListItemIcon,\n  ListItemText,\n} from \"@mui/material\";\nimport ColumnInner from \"utils/components/ColumnInner\";\nimport FolderOpenIcon from \"@mui/icons-material/FolderOpen\";\nimport DragIndicatorIcon from \"@mui/icons-material/DragIndicator\";\nimport ListAltIcon from \"@mui/icons-material/ListAlt\";\nimport styles from \"./ColOne.module.scss\";\nimport classNames from \"classnames\";\nimport KeyboardArrowDownIcon from \"@mui/icons-material/KeyboardArrowDown\";\nimport DashboardIcon from \"@mui/icons-material/Dashboard\";\nimport getIconForTodo from \"utils/getIconForTodo\";\n\nconst Folder = ({\n  todoTree,\n  indentation = 0,\n}: {\n  todoTree: TodoTree;\n  indentation?: number;\n}) => {\n  const { id, name, children, allChildren } = todoTree;\n  const { todoId, updateCurrentTodo } = useCurrentTodo();\n  const isActive = todoId === id;\n  const { activeDrag } = useGlobalStateContext();\n  const { todoDict } = useGlobalDataContext();\n\n  const isDraggingProject = activeDrag?.type === DD_TYPES.project;\n  const isDraggingValidTodoProject =\n    activeDrag?.type === DD_TYPES.todoProject &&\n    todoDict[activeDrag.id].parentId !== id &&\n    activeDrag.id !== id &&\n    !todoDict[activeDrag.id].allChildren.includes(id);\n\n  const isDroppable = isDraggingValidTodoProject;\n\n  const { setNodeRef, isOver } = useDroppable({\n    disabled: !isDroppable,\n    id: `col-one-folder-${id}`,\n    data: { type: DD_TYPES.project, id },\n  });\n\n  const isBoard = indentation === 0;\n\n  const unfinishedCountAll = allChildren.filter((id) =>\n    todoTreeIsUnfinishedTask(todoDict[id])\n  ).length;\n\n  const unfinishedCount = children.filter(({ id }) =>\n    todoTreeIsUnfinishedTask(todoDict[id])\n  ).length;\n\n  const isTask = todoTreeIsUnfinishedTask(todoDict[id]);\n\n  const useCount = isBoard ? unfinishedCountAll : unfinishedCount;\n\n  const Icon = getIconForTodo(todoTree);\n\n  return (\n    <>\n      <div ref={setNodeRef} style={{ paddingLeft: indentation * 20 }}>\n        <div\n          className={classNames(styles.folderItem, {\n            [styles.isDroppable]: isDroppable,\n            [styles.isOver]: isOver,\n          })}\n          // ref={setNodeRef}\n          onClick={(e) => {\n            e.stopPropagation();\n            updateCurrentTodo(id);\n          }}\n        >\n          <div className={styles.left}>\n            <Badge\n              invisible={!useCount}\n              color={\"warning\"}\n              badgeContent={useCount}\n              variant={isBoard ? \"standard\" : \"dot\"}\n            >\n              <Icon className={styles.folderIcon} />\n            </Badge>\n            <div\n              className={classNames(styles.name, {\n                [styles.isActive]: isActive,\n                [styles.isProject]: indentation === 0,\n              })}\n            >\n              {name}\n            </div>\n          </div>\n        </div>\n      </div>\n      {(() => {\n        const items = children.filter(\n          (todo) =>\n            todoTreeIsFolder(todo) ||\n            todoTreeIsProject(todo) ||\n            todoTreeIsUnfinishedTask(todo)\n        );\n        return (\n          !isDraggingProject &&\n          !!items.length && (\n            <div>\n              {items.map((todoTreeChild) => (\n                <Folder\n                  indentation={indentation + 1}\n                  key={todoTreeChild.id}\n                  todoTree={todoTreeChild}\n                />\n              ))}\n            </div>\n          )\n        );\n      })()}\n    </>\n  );\n};\n\nexport const ProjectInner = ({ id }: { id: string }) => {\n  const { todoDict } = useGlobalDataContext();\n  const todoId = id;\n\n  return <Folder todoTree={todoDict[todoId]} />;\n};\n\nconst ColOne = ({ className }: { className: string }) => {\n  const { todoTreeArray, addTodo } = useGlobalDataContext();\n\n  return (\n    <ColumnInner\n      className={className}\n      bottomContents={\n        <Button\n          variant=\"outlined\"\n          onClick={() => {\n            addTodo(BOARD_ID, { name: \"New Project\" }, true);\n          }}\n        >\n          Add project\n        </Button>\n      }\n    >\n      <div className={styles.projects}>\n        {todoTreeArray.map(({ id }) => (\n          <ProjectInner key={id} id={id} />\n        ))}\n      </div>\n    </ColumnInner>\n  );\n};\n\nexport default ColOne;\n","import classNames from \"classnames\";\nimport React, { useState } from \"react\";\nimport styles from \"./TextEditor.module.scss\";\n\ntype Props = {\n  value: string;\n  onChange: (value: string) => void;\n  className?: string;\n};\n\nconst TextEditor = ({ value, onChange, className }: Props) => {\n  const [localValue, updateLocalValue] = useState<string>(value);\n  const [isEditing, setIsEditing] = useState(false);\n\n  const commitChange = () => {\n    onChange(localValue);\n    setIsEditing(false);\n  };\n\n  if (!isEditing) {\n    return (\n      <div\n        onClick={(e) => {\n          e.stopPropagation();\n          setIsEditing(true);\n        }}\n        className={classNames(className, styles.preview)}\n      >\n        {value}\n      </div>\n    );\n  }\n\n  return (\n    <textarea\n      className={styles.textArea}\n      autoFocus\n      onClick={(e) => e.stopPropagation()}\n      onBlur={commitChange}\n      value={localValue}\n      onChange={(e) => {\n        updateLocalValue(e.target.value);\n      }}\n      onKeyPress={(e) => {\n        if (!e.shiftKey && e.key === \"Enter\") {\n          e.preventDefault();\n          e.currentTarget.blur();\n          commitChange();\n        }\n      }}\n    />\n  );\n};\n\nexport default TextEditor;\n","import SimpleMDE, { SimpleMdeToCodemirrorEvents } from \"react-simplemde-editor\";\nimport \"easymde/dist/easymde.min.css\";\nimport { useMemo, useRef, useState } from \"react\";\n// import ReactMarkdown from \"react-markdown\";\nimport Showdown from \"showdown\";\nimport styles from \"./MarkdownEditor.module.scss\";\nimport classNames from \"classnames\";\nimport { Button } from \"@mui/material\";\n\nconst converter = new Showdown.Converter({ simpleLineBreaks: true });\n\nconst options = {\n  status: false,\n  previewRender: (text: string) => {\n    return converter.makeHtml(text);\n  },\n  autofocus: true,\n};\n\nconst MarkdownEditor = ({\n  value: initialValue,\n  onChange,\n  className,\n}: {\n  value: string;\n  onChange: (newValue: string) => void;\n  className?: string;\n}) => {\n  const [isPreview, setIsPreview] = useState(true);\n  const [value, setValue] = useState(initialValue);\n\n  const save = () => {\n    setIsPreview(true);\n    onChange(value);\n  };\n\n  // const { current: events } = useRef({\n  //   blur: save,\n  // });\n\n  if (isPreview) {\n    return (\n      <div\n        className={classNames(styles.preview, \"editor-preview\", className)}\n        onClick={() => setIsPreview(false)}\n        dangerouslySetInnerHTML={{\n          __html: converter.makeHtml(value || \"Add a description...\"),\n        }}\n      />\n    );\n  }\n\n  return (\n    <div className={className}>\n      <Button className={styles.button} variant=\"contained\" onClick={save}>\n        save\n      </Button>\n      <SimpleMDE options={options} value={value} onChange={setValue} />\n    </div>\n  );\n};\n\nexport default MarkdownEditor;\n","import {\n  Badge,\n  Button,\n  Card,\n  Checkbox,\n  Divider,\n  SpeedDial,\n  SpeedDialAction,\n  SpeedDialIcon,\n  Stack,\n} from \"@mui/material\";\n\nimport {\n  SortableContext,\n  useSortable,\n  verticalListSortingStrategy,\n} from \"@dnd-kit/sortable\";\n\nimport useCurrentTodo from \"hooks/useCurrentTodo\";\nimport { useGlobalDataContext } from \"hooks/useGlobalData\";\nimport { partition } from \"lodash\";\nimport { DD_TYPES, TodoTree, TodoTypes } from \"types\";\nimport {\n  todoTreeIsUnfinishedTask,\n  todoTreeIsBoard,\n  todoTreeIsFolder,\n  todoTreeIsProject,\n  todoTreeIsTask,\n} from \"utils/selectors\";\nimport { DragOverlay } from \"@dnd-kit/core\";\nimport { useGlobalStateContext } from \"hooks/useGlobalState\";\nimport { CSS } from \"@dnd-kit/utilities\";\nimport TextEditor from \"utils/components/TextEditor\";\nimport MarkdownEditor from \"utils/components/MarkdownEditor\";\nimport ColumnInner from \"utils/components/ColumnInner\";\nimport styles from \"./ColTwo.module.scss\";\n\nimport AddIcon from \"@mui/icons-material/Add\";\nimport MoreHorizIcon from \"@mui/icons-material/MoreHoriz\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport FolderOpenIcon from \"@mui/icons-material/FolderOpen\";\nimport DragIndicatorIcon from \"@mui/icons-material/DragIndicator\";\nimport KeyboardArrowRightIcon from \"@mui/icons-material/KeyboardArrowRight\";\nimport ListAltIcon from \"@mui/icons-material/ListAlt\";\nimport classNames from \"classnames\";\nimport getIconForTodo from \"utils/getIconForTodo\";\nimport CheckBoxIcon from \"@mui/icons-material/CheckBox\";\nimport IndeterminateCheckBoxIcon from \"@mui/icons-material/IndeterminateCheckBox\";\n\nexport const TodoCellInner = ({\n  id,\n  listeners,\n  attributes,\n  isOver,\n}: {\n  id: string;\n  listeners?: any;\n  attributes?: any;\n  isOver?: boolean;\n}) => {\n  const { todoDict, editTodo, deleteTodo } = useGlobalDataContext();\n  const todo = todoDict[id];\n  const { name, status, children, allChildren } = todo;\n  const { updateCurrentTodo } = useCurrentTodo();\n\n  const { activeDrag } = useGlobalStateContext();\n\n  const isDroppable =\n    activeDrag &&\n    activeDrag.type === DD_TYPES.todoProject &&\n    activeDrag.containerId?.startsWith(TodoTypes.todo) &&\n    todoDict[id].children.length > 0 &&\n    activeDrag.id !== id;\n\n  const isChecked = children.length === 0 && status === \"done\";\n\n  const unfinishedCount = allChildren.filter((id) =>\n    todoTreeIsUnfinishedTask(todoDict[id])\n  ).length;\n\n  const Icon = getIconForTodo(todo);\n\n  return (\n    <Card\n      className={classNames(styles.todo, {\n        [styles.isChecked]: isChecked,\n        [styles.isDroppable]: isDroppable,\n        [styles.isOver]: isOver,\n      })}\n    >\n      <div className={styles.left}>\n        <div className={styles.drag} {...listeners} {...attributes}>\n          <DragIndicatorIcon />\n        </div>\n        <div className={styles.iconWrapper}>\n          {!(todoTreeIsFolder(todo) || todoTreeIsProject(todo)) ? (\n            <Checkbox\n              checked={status === \"done\"}\n              onClick={(e) => {\n                e.stopPropagation();\n                editTodo(id, {\n                  status: status === \"done\" ? undefined : \"done\",\n                });\n              }}\n            />\n          ) : (\n            <Badge\n              invisible={unfinishedCount === 0}\n              color={\"warning\"}\n              badgeContent={unfinishedCount}\n            >\n              <Icon className={styles.folderIcon} />\n            </Badge>\n          )}\n        </div>\n        <TextEditor\n          className={styles.nameEditor}\n          value={name}\n          onChange={(newName) => editTodo(id, { name: newName })}\n        />\n      </div>\n\n      <div className={styles.arrow} onClick={() => updateCurrentTodo(id)}>\n        <KeyboardArrowRightIcon />\n      </div>\n    </Card>\n  );\n};\n\nconst TodoCell = ({ id }: { id: string }) => {\n  const { attributes, listeners, setNodeRef, transform, transition, over } =\n    useSortable({ id, data: { type: DD_TYPES.todoProject, id } });\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n  };\n\n  return (\n    <div ref={setNodeRef} style={style}>\n      <TodoCellInner\n        id={id}\n        listeners={listeners}\n        attributes={attributes}\n        isOver={!!over && over.id === id}\n      />\n    </div>\n  );\n};\n\nconst TodoStack = ({ todos, id }: { todos: TodoTree[]; id: string }) => {\n  return (\n    <>\n      <SortableContext\n        id={id}\n        items={todos}\n        strategy={verticalListSortingStrategy}\n      >\n        {todos.map(({ id: todoId }) => (\n          <TodoCell key={todoId} id={todoId} />\n        ))}\n      </SortableContext>\n    </>\n  );\n};\n\nconst ColTwo = ({ className }: { className: string }) => {\n  const { todoTree } = useCurrentTodo();\n  const { name, children, id, notes } = todoTree;\n  const { addTodo, editTodo, deleteTodo } = useGlobalDataContext();\n  const [folders, todos] = partition(children, (todoTree) => {\n    return todoTreeIsFolder(todoTree) || todoTreeIsProject(todoTree);\n  });\n  const [done, notDone] = partition(todos, (a) => a.status === \"done\");\n\n  return (\n    <ColumnInner\n      className={className}\n      bottomContents={\n        !todoTreeIsBoard(todoTree) && (\n          <Button variant=\"outlined\" onClick={() => addTodo(id)}>\n            Add Task\n          </Button>\n        )\n      }\n      outerContents={\n        !todoTreeIsBoard(todoTree) && (\n          <SpeedDial\n            ariaLabel=\"SpeedDial basic example\"\n            sx={{ position: \"absolute\", bottom: 16, right: 16 }}\n            icon={<MoreHorizIcon />}\n          >\n            <SpeedDialAction\n              onClick={() => deleteTodo(id)}\n              icon={<DeleteIcon />}\n              tooltipTitle={`Delete ${name}`}\n            />\n            {todoTreeIsTask(todoTree) && todoTreeIsUnfinishedTask(todoTree) && (\n              <SpeedDialAction\n                onClick={() =>\n                  editTodo(id, {\n                    status: \"done\",\n                  })\n                }\n                icon={<CheckBoxIcon />}\n                tooltipTitle={`Mark ${name} as Complete`}\n              />\n            )}\n            {todoTreeIsTask(todoTree) && !todoTreeIsUnfinishedTask(todoTree) && (\n              <SpeedDialAction\n                onClick={() =>\n                  editTodo(id, {\n                    status: undefined,\n                  })\n                }\n                icon={<IndeterminateCheckBoxIcon />}\n                tooltipTitle={`Mark ${name} as Incomplete`}\n              />\n            )}\n          </SpeedDial>\n        )\n      }\n    >\n      <div className={styles.header}>\n        <TextEditor\n          className={styles.name}\n          value={name}\n          onChange={(newName) => editTodo(id, { name: newName })}\n        />\n      </div>\n      <MarkdownEditor\n        className={styles.notes}\n        value={notes}\n        onChange={(newNotes) => editTodo(id, { notes: newNotes })}\n      />\n\n      {folders.length > 0 && (\n        <>\n          <Divider className={styles.divider} variant=\"middle\" />\n          <TodoStack id={TodoTypes.folder} todos={folders} />\n        </>\n      )}\n\n      {done.length + notDone.length > 0 && (\n        <>\n          <Divider className={styles.divider} variant=\"middle\" />\n          <TodoStack id={`${TodoTypes.todo}-notDone`} todos={notDone} />\n          <TodoStack id={`${TodoTypes.todo}-done`} todos={done} />\n        </>\n      )}\n    </ColumnInner>\n  );\n};\n\nexport default ColTwo;\n","import {\n  DndContext,\n  closestCenter,\n  KeyboardSensor,\n  PointerSensor,\n  useSensor,\n  useSensors,\n  DragOverlay,\n  useDroppable,\n} from \"@dnd-kit/core\";\nimport {\n  arrayMove,\n  sortableKeyboardCoordinates,\n  useSortable,\n  verticalListSortingStrategy,\n  SortableContext,\n} from \"@dnd-kit/sortable\";\nimport {\n  Breadcrumbs,\n  Button,\n  Card,\n  Checkbox,\n  Chip,\n  Container,\n  Link,\n  Paper,\n} from \"@mui/material\";\nimport { TIMELINE_GROUPS } from \"data/example\";\nimport { useGlobalDataContext } from \"hooks/useGlobalData\";\nimport { get, partition } from \"lodash\";\nimport {\n  ActiveDrag,\n  appendPrefix,\n  DD_TYPES,\n  removePrefix,\n  TG_ALL,\n  TodoGroup,\n  getDragEventData,\n} from \"types\";\nimport {\n  todoTreeIsUnfinishedTask,\n  todoTreeIsFolder,\n  todoTreeIsTask,\n} from \"utils/selectors\";\nimport { CSS } from \"@dnd-kit/utilities\";\nimport { Fragment, useState } from \"react\";\nimport { useGlobalStateContext } from \"hooks/useGlobalState\";\nimport useCurrentTodo from \"hooks/useCurrentTodo\";\nimport ColumnInner from \"utils/components/ColumnInner\";\nimport styles from \"./ColThree.module.scss\";\nimport DragIndicatorIcon from \"@mui/icons-material/DragIndicator\";\nimport TextEditor from \"utils/components/TextEditor\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport ArrowDropDownIcon from \"@mui/icons-material/ArrowDropDown\";\nimport ArrowDropUpIcon from \"@mui/icons-material/ArrowDropUp\";\nimport ArrowRightIcon from \"@mui/icons-material/ArrowRight\";\nimport ArrowLeftIcon from \"@mui/icons-material/ArrowLeft\";\nimport classNames from \"classnames\";\nimport { Box } from \"@mui/system\";\nimport getIconForTodo from \"utils/getIconForTodo\";\n\nexport const TodoCellInner = ({\n  id,\n  listeners,\n  isSearch,\n}: {\n  id: string;\n  listeners?: any;\n  isSearch?: boolean;\n}) => {\n  const { todoDict, editTodo } = useGlobalDataContext();\n  const { updateCurrentTodo } = useCurrentTodo();\n  const todo = todoDict[id];\n\n  const isTask = todoTreeIsTask(todo);\n\n  const Icon = getIconForTodo(todo);\n\n  return (\n    <Card\n      className={styles.card}\n      onClick={() => {\n        updateCurrentTodo(id);\n      }}\n    >\n      <div className={styles.breadCrumbs}>\n        {[...todo.parents].reverse().map((todoParent) => (\n          <Fragment key={todoParent}>\n            <div className={styles.carrat}>›</div>\n            <div\n              className={styles.link}\n              onClick={(e) => {\n                e.stopPropagation();\n                updateCurrentTodo(todoParent);\n              }}\n            >\n              {todoDict[todoParent].name}\n            </div>\n          </Fragment>\n        ))}\n      </div>\n      <div className={styles.middle}>\n        {!isSearch && (\n          <div\n            style={{ cursor: \"move\" }}\n            className={styles.iconWrapper}\n            {...listeners}\n          >\n            <DragIndicatorIcon />\n          </div>\n        )}\n\n        <div className={styles.name}>{todo.name}</div>\n        <div className={styles.iconWrapper}>\n          {!isSearch ? (\n            <Checkbox\n              checked={todo.status === \"done\"}\n              onClick={(e) => {\n                e.stopPropagation();\n                editTodo(id, {\n                  status: todo.status === \"done\" ? undefined : \"done\",\n                });\n              }}\n            />\n          ) : (\n            <div className={styles.iconNonCheck}>\n              <Icon />\n            </div>\n          )}\n        </div>\n      </div>\n    </Card>\n  );\n};\n\nconst TodoCell = ({ id, disabled }: { id: string; disabled?: boolean }) => {\n  const todoId = removePrefix(id, DD_TYPES.todoTimeline);\n\n  const { attributes, listeners, setNodeRef, transform, transition } =\n    useSortable({\n      id,\n      data: { type: DD_TYPES.todoTimeline, id: todoId },\n      disabled,\n    });\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n  };\n\n  return (\n    <div ref={setNodeRef} style={style} {...attributes}>\n      <TodoCellInner id={todoId} listeners={listeners} />\n    </div>\n  );\n};\n\nconst TodoGroupHolderInner = ({\n  items,\n  id,\n}: {\n  items: string[];\n  id: string;\n}) => {\n  const { activeDrag } = useGlobalStateContext();\n  const { todoGroupsTree } = useGlobalDataContext();\n\n  const isDroppableDisabled =\n    activeDrag &&\n    activeDrag.type === DD_TYPES.todoTimeline &&\n    todoGroupsTree[id].includes(activeDrag.id);\n\n  const isDroppable = activeDrag && !isDroppableDisabled;\n\n  const { setNodeRef, isOver, over } = useDroppable({\n    id: appendPrefix(id, DD_TYPES.todoTimelineGroup),\n    disabled: isDroppableDisabled,\n\n    data: {\n      type: DD_TYPES.todoTimelineGroup,\n      id,\n    },\n  });\n\n  const isReallyOver =\n    isOver || (over && getDragEventData(over).containerId === id);\n\n  return (\n    <div\n      ref={setNodeRef}\n      className={classNames(styles.holderInnerWrapper, {\n        [styles.isOver]: isReallyOver,\n        [styles.isDroppable]: isDroppable,\n      })}\n    >\n      {items.length ? (\n        items.map((todoId) => <TodoCell key={todoId} id={todoId} />)\n      ) : (\n        <Paper elevation={0} className={styles.emptyState}>\n          Drag a task\n        </Paper>\n      )}\n    </div>\n  );\n};\n\nconst TodoGroupHolder = ({\n  todoGroup: { id, name },\n}: {\n  todoGroup: TodoGroup;\n}) => {\n  const {\n    todoGroupsTree,\n    todoDict,\n    editTodoGroup,\n    deleteTodoGroup,\n    reorderTodoGroup,\n  } = useGlobalDataContext();\n\n  const items = todoGroupsTree[id]\n    .filter((todoId) => {\n      return (\n        todoTreeIsTask(todoDict[todoId]) &&\n        todoTreeIsUnfinishedTask(todoDict[todoId])\n      );\n    })\n    .map((todoId) => appendPrefix(todoId, DD_TYPES.todoTimeline));\n\n  const inner = (\n    <div>\n      <SortableContext\n        id={id}\n        items={items}\n        strategy={verticalListSortingStrategy}\n      >\n        <TodoGroupHolderInner items={items} id={id} />\n      </SortableContext>\n    </div>\n  );\n\n  if (id === TG_ALL) {\n    return (\n      <Card className={styles.groupHolder}>\n        <div className={styles.groupTitle}>Backlog</div>\n        {inner}\n      </Card>\n    );\n  }\n\n  return (\n    <Card className={styles.groupHolder}>\n      <div className={styles.groupTitle}>\n        <TextEditor\n          className={styles.title}\n          value={name}\n          onChange={(newName) => editTodoGroup(id, { name: newName })}\n        />\n        <div className={styles.right}>\n          <div className={styles.delete} onClick={() => deleteTodoGroup(id)}>\n            <DeleteIcon fontSize=\"small\" />\n          </div>\n          <div className={styles.sortArrows}>\n            <ArrowDropUpIcon\n              className={styles.sortArrow}\n              onClick={() => {\n                reorderTodoGroup(id, \"up\");\n              }}\n            />\n            <ArrowDropDownIcon\n              className={styles.sortArrow}\n              onClick={() => {\n                reorderTodoGroup(id, \"down\");\n              }}\n            />\n          </div>\n        </div>\n      </div>\n      {inner}\n    </Card>\n  );\n};\n\nexport const SearchScreen = ({ search }: { search?: string }) => {\n  const { todoDict } = useGlobalDataContext();\n  const { clearActiveSearch, setIsSearchFocused } = useGlobalStateContext();\n\n  const todosToShow = Object.values(todoDict).filter((todo) => {\n    return !search || todo.name.toLowerCase().includes(search.toLowerCase());\n  });\n\n  return (\n    <Box sx={{ pt: 5, overflow: \"auto\", height: \"100%\" }}>\n      <Container>\n        <div className={styles.searchWrapper}>\n          <Button\n            variant=\"contained\"\n            onClick={() => {\n              clearActiveSearch();\n              setIsSearchFocused(false);\n            }}\n          >\n            Done Searching\n          </Button>\n        </div>\n        {todosToShow.length === 0 ? (\n          <Card>No results found</Card>\n        ) : (\n          todosToShow.map((todo) => (\n            <TodoCellInner isSearch key={todo.id} id={todo.id} />\n          ))\n        )}\n      </Container>\n    </Box>\n  );\n};\n\nconst ColThree = ({ className }: { className: string }) => {\n  const { todoGroups, addTodoGroup } = useGlobalDataContext();\n  const { isShowingKanban } = useGlobalStateContext();\n\n  const useGroups = isShowingKanban\n    ? Object.values(todoGroups).reverse()\n    : Object.values(todoGroups);\n\n  return (\n    <ColumnInner\n      className={className}\n      bottomContents={\n        <Button\n          variant=\"outlined\"\n          onClick={() => {\n            addTodoGroup({ name: \"New Todo Group\" });\n          }}\n        >\n          Add Todo Group\n        </Button>\n      }\n    >\n      <div\n        className={classNames(styles.container, {\n          [styles.isShowingKanban]: isShowingKanban,\n        })}\n      >\n        {useGroups.map((todoGroup) => (\n          <div className={styles.groupHolderWrapper}>\n            <TodoGroupHolder key={todoGroup.id} todoGroup={todoGroup} />\n          </div>\n        ))}\n      </div>\n    </ColumnInner>\n  );\n};\n\nexport default ColThree;\n","import { Redirect } from \"react-router-dom\";\nimport { useGlobalDataContext } from \"hooks/useGlobalData\";\nimport styles from \"./Board.module.scss\";\nimport ColOne, { ProjectInner } from \"./components/ColOne\";\nimport ColTwo, {\n  TodoCellInner as TodoCellInnerColTwo,\n} from \"./components/ColTwo\";\nimport ColThree, {\n  SearchScreen,\n  TodoCellInner as TodoCellInnerColThree,\n} from \"./components/ColThree\";\nimport {\n  DndContext,\n  closestCenter,\n  KeyboardSensor,\n  PointerSensor,\n  useSensor,\n  useSensors,\n  DragOverlay,\n  closestCorners,\n  rectIntersection,\n} from \"@dnd-kit/core\";\nimport {\n  arrayMove,\n  SortableContext,\n  sortableKeyboardCoordinates,\n  verticalListSortingStrategy,\n} from \"@dnd-kit/sortable\";\nimport { useGlobalStateContext } from \"hooks/useGlobalState\";\nimport { get } from \"lodash\";\nimport {\n  ActiveDrag,\n  DD_TYPES,\n  getDragEventData,\n  removePrefix,\n  TG_ALL,\n  TodoTypes,\n} from \"types\";\nimport useCurrentTodo from \"hooks/useCurrentTodo\";\nimport { getAllLeafIds } from \"utils/selectors\";\nimport ColumnInner from \"utils/components/ColumnInner\";\nimport classNames from \"classnames\";\n\nconst Projects = () => {\n  const sensors = useSensors(\n    useSensor(PointerSensor),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    })\n  );\n\n  const { todoId: currentTodoId } = useCurrentTodo();\n  const { setActiveDrag, clearActiveDrag, activeDrag, isShowingKanban } =\n    useGlobalStateContext();\n  const {\n    todoGroupsTree,\n    reorderTodos,\n    moveIntoFolder,\n    editTodo,\n    editTodos,\n    reorderGroupTodos,\n    todoDict,\n  } = useGlobalDataContext();\n\n  const moveTodoGroup = (todoId: string, groupId: string) => {\n    const leafIds = getAllLeafIds(todoDict[todoId]);\n\n    editTodos(leafIds, (todo, index) => {\n      if (groupId !== TG_ALL && !todoGroupsTree[groupId]) {\n        return todo;\n      }\n      return {\n        timelineGroup: groupId === TG_ALL ? undefined : groupId,\n        orderIndex: todoGroupsTree[groupId].length + index,\n      };\n    });\n  };\n\n  return (\n    <DndContext\n      sensors={sensors}\n      collisionDetection={closestCorners}\n      onDragStart={(event) => {\n        setActiveDrag(event.active);\n      }}\n      onDragOver={(event) => {\n        const { active, over } = event;\n\n        if (!over) {\n          return;\n        }\n\n        const activeData = getDragEventData(active);\n        const overData = getDragEventData(over);\n\n        if (activeData.type === DD_TYPES.todoTimeline) {\n          if (activeData.containerId === overData.containerId) {\n            return;\n          } else if (overData.containerId) {\n            moveTodoGroup(activeData.id, overData.containerId);\n          } else if (activeData.containerId !== overData.id) {\n            moveTodoGroup(activeData.id, overData.id);\n          }\n        }\n      }}\n      onDragEnd={(event) => {\n        const { active, over } = event;\n\n        clearActiveDrag();\n\n        if (!over) {\n          return;\n        }\n\n        const activeData = getDragEventData(active);\n        const overData = getDragEventData(over);\n\n        if (activeData.type === DD_TYPES.project) {\n          if (overData.type === DD_TYPES.project) {\n            reorderTodos(activeData.id, overData.id);\n          } else if (\n            overData.type === DD_TYPES.todoTimelineGroup ||\n            overData.type === DD_TYPES.todoTimeline\n          ) {\n            const groupId = overData.containerId || overData.id;\n            moveTodoGroup(activeData.id, groupId);\n          }\n        } else if (activeData.type === DD_TYPES.todoProject) {\n          if (overData.type === DD_TYPES.todoProject) {\n            if (activeData.containerId === overData.containerId) {\n              reorderTodos(activeData.id, overData.id);\n            } else if (\n              activeData.containerId?.startsWith(TodoTypes.todo) &&\n              overData.containerId?.startsWith(TodoTypes.folder)\n            ) {\n              moveIntoFolder(activeData.id, overData.id);\n            }\n          } else if (overData.type === DD_TYPES.project) {\n            moveIntoFolder(active.id, overData.id);\n          } else if (\n            overData.type === DD_TYPES.todoTimelineGroup ||\n            overData.type === DD_TYPES.todoTimeline\n          ) {\n            const groupId = overData.containerId || overData.id;\n            moveTodoGroup(activeData.id, groupId);\n          }\n        } else if (activeData.type === DD_TYPES.todoTimeline) {\n          if (overData.type === DD_TYPES.todoTimeline && overData.containerId) {\n            reorderGroupTodos(\n              activeData.containerId!,\n              activeData.id,\n              overData.id\n            );\n          }\n        }\n      }}\n    >\n      {!isShowingKanban && <ColOne className={styles.row1} />}\n      {!isShowingKanban && (\n        <ColTwo className={styles.row2} key={currentTodoId} />\n      )}\n      <ColThree\n        className={classNames(styles.row3, {\n          [styles.isShowingKanban]: isShowingKanban,\n        })}\n      />\n      <DragOverlay dropAnimation={null}>\n        {activeDrag ? (\n          activeDrag.type === DD_TYPES.project ? (\n            <ProjectInner id={activeDrag.id} />\n          ) : activeDrag.type === DD_TYPES.todoProject ? (\n            <TodoCellInnerColTwo id={activeDrag.id} />\n          ) : (\n            <TodoCellInnerColThree id={activeDrag.id} />\n          )\n        ) : null}\n      </DragOverlay>\n    </DndContext>\n  );\n};\n\nconst Board = () => {\n  const { todoTree } = useCurrentTodo();\n  const { activeSearch, isSearchFocused } = useGlobalStateContext();\n\n  if (!todoTree) {\n    return <Redirect to=\"/\" />;\n  }\n\n  if (activeSearch || isSearchFocused) {\n    return <SearchScreen search={activeSearch} />;\n  }\n\n  return (\n    <div className={styles.container}>\n      <Projects />\n    </div>\n  );\n};\n\nexport default Board;\n","import * as React from \"react\";\nimport { styled, alpha } from \"@mui/material/styles\";\nimport AppBar from \"@mui/material/AppBar\";\nimport Box from \"@mui/material/Box\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Typography from \"@mui/material/Typography\";\nimport InputBase from \"@mui/material/InputBase\";\nimport Badge from \"@mui/material/Badge\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport Menu from \"@mui/material/Menu\";\nimport MenuIcon from \"@mui/icons-material/Menu\";\nimport SearchIcon from \"@mui/icons-material/Search\";\nimport AccountCircle from \"@mui/icons-material/AccountCircle\";\nimport MailIcon from \"@mui/icons-material/Mail\";\nimport NotificationsIcon from \"@mui/icons-material/Notifications\";\nimport MoreIcon from \"@mui/icons-material/MoreVert\";\nimport { useGlobalStateContext } from \"hooks/useGlobalState\";\n\nconst Search = styled(\"div\")(({ theme }) => ({\n  position: \"relative\",\n  borderRadius: theme.shape.borderRadius,\n  backgroundColor: alpha(theme.palette.common.white, 0.15),\n  \"&:hover\": {\n    backgroundColor: alpha(theme.palette.common.white, 0.25),\n  },\n  marginRight: theme.spacing(2),\n  marginLeft: 0,\n  width: \"100%\",\n  [theme.breakpoints.up(\"sm\")]: {\n    marginLeft: theme.spacing(3),\n    width: \"auto\",\n  },\n}));\n\nconst SearchIconWrapper = styled(\"div\")(({ theme }) => ({\n  padding: theme.spacing(0, 2),\n  height: \"100%\",\n  position: \"absolute\",\n  pointerEvents: \"none\",\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n}));\n\nconst StyledInputBase = styled(InputBase)(({ theme }) => ({\n  color: \"inherit\",\n  \"& .MuiInputBase-input\": {\n    padding: theme.spacing(1, 1, 1, 0),\n    // vertical padding + font size from searchIcon\n    paddingLeft: `calc(1em + ${theme.spacing(4)})`,\n    transition: theme.transitions.create(\"width\"),\n    width: \"100%\",\n    [theme.breakpoints.up(\"md\")]: {\n      width: \"20ch\",\n    },\n  },\n}));\n\nexport default function PrimarySearchAppBar() {\n  const { activeSearch, setActiveSearch, setIsSearchFocused } =\n    useGlobalStateContext();\n  return (\n    <Search>\n      <SearchIconWrapper>\n        <SearchIcon />\n      </SearchIconWrapper>\n      <StyledInputBase\n        placeholder=\"Search…\"\n        value={activeSearch}\n        onChange={(e) => setActiveSearch(e.currentTarget.value)}\n        onFocus={() => setIsSearchFocused(true)}\n      />\n    </Search>\n  );\n}\n","import {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\nimport Board from \"components/Board\";\nimport { GlobalDataProvider, useGlobalDataContext } from \"hooks/useGlobalData\";\nimport {\n  GlobalStateProvider,\n  useGlobalStateContext,\n} from \"hooks/useGlobalState\";\nimport styles from \"./App.module.scss\";\nimport { AppBar, IconButton, Toolbar, Typography } from \"@mui/material\";\nimport PrimarySearchAppBar from \"utils/components/SearchBar\";\nimport TableChartIcon from \"@mui/icons-material/TableChart\";\nimport TableChartOutlinedIcon from \"@mui/icons-material/TableChartOutlined\";\n\nconst EmptyState = () => {\n  const { todoTreeArray, addTodo } = useGlobalDataContext();\n  return (\n    <>\n      {todoTreeArray.length ? (\n        <Redirect to={`/${todoTreeArray[0].id}`} />\n      ) : (\n        <div\n          onClick={() => {\n            addTodo(undefined, { name: \"My First Project\" });\n          }}\n        >\n          Create first project\n        </div>\n      )}\n    </>\n  );\n};\n\nconst Nav = () => {\n  const { isShowingKanban, setIsShowingKanban } = useGlobalStateContext();\n  return (\n    <AppBar position=\"static\" className={styles.nav}>\n      <Toolbar>\n        <Typography\n          variant=\"h6\"\n          color=\"inherit\"\n          component=\"div\"\n          sx={{ flexGrow: 1 }}\n        >\n          2doos\n        </Typography>\n        <PrimarySearchAppBar />\n        <IconButton\n          color=\"inherit\"\n          onClick={() => {\n            setIsShowingKanban(!isShowingKanban);\n          }}\n        >\n          {isShowingKanban ? <TableChartOutlinedIcon /> : <TableChartIcon />}\n        </IconButton>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nconst App = () => {\n  return (\n    <Router>\n      <GlobalStateProvider>\n        <GlobalDataProvider>\n          <Nav />\n          <div className={styles.app}>\n            <Switch>\n              <Route path=\"/:todo\">\n                <Board />\n              </Route>\n              <Route path=\"/\">\n                <EmptyState />\n              </Route>\n            </Switch>\n          </div>\n        </GlobalDataProvider>\n      </GlobalStateProvider>\n    </Router>\n  );\n};\n\nexport default App;\n","import { createTheme } from '@mui/material/styles';\nimport { red } from '@mui/material/colors';\n\n// A custom theme for this app\nconst theme = createTheme({\n  // palette: {\n  //   primary: {\n  //     main: '#556cd6',\n  //   },\n  //   secondary: {\n  //     main: '#19857b',\n  //   },\n  //   error: {\n  //     main: red.A400,\n  //   },\n  // },\n});\n\nexport default theme;\n","import * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport { ThemeProvider } from '@mui/material/styles';\nimport App from './App';\nimport theme from './theme';\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n    <CssBaseline />\n    <App />\n  </ThemeProvider>,\n  document.querySelector('#root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ColThree_container__HXCOZ\",\"isShowingKanban\":\"ColThree_isShowingKanban__2dJta\",\"groupHolderWrapper\":\"ColThree_groupHolderWrapper__28eVA\",\"groupHolder\":\"ColThree_groupHolder__1Ss44\",\"groupTitle\":\"ColThree_groupTitle__1pUVL\",\"delete\":\"ColThree_delete__25SMz\",\"title\":\"ColThree_title__tBZed\",\"right\":\"ColThree_right__3d9SQ\",\"sortArrows\":\"ColThree_sortArrows__2M1rz\",\"sortArrow\":\"ColThree_sortArrow__1WkpJ\",\"holderInnerWrapper\":\"ColThree_holderInnerWrapper__XCnsy\",\"isDroppable\":\"ColThree_isDroppable__39iqG\",\"isOver\":\"ColThree_isOver__qbOKB\",\"emptyState\":\"ColThree_emptyState__3Nzun\",\"card\":\"ColThree_card__3wcyg\",\"breadCrumbs\":\"ColThree_breadCrumbs__3A_kT\",\"carrat\":\"ColThree_carrat__2PdV4\",\"link\":\"ColThree_link__22D8h\",\"iconWrapper\":\"ColThree_iconWrapper__1Aj9H\",\"middle\":\"ColThree_middle__3mKBZ\",\"name\":\"ColThree_name__1GxuL\",\"iconNonCheck\":\"ColThree_iconNonCheck__3eO40\",\"searchWrapper\":\"ColThree_searchWrapper__3MOcv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"name\":\"ColTwo_name__2_rLL\",\"notes\":\"ColTwo_notes__clwpS\",\"divider\":\"ColTwo_divider__3eTYs\",\"todo\":\"ColTwo_todo__1v3br\",\"isDroppable\":\"ColTwo_isDroppable__28zgJ\",\"isOver\":\"ColTwo_isOver__2QC3H\",\"isChecked\":\"ColTwo_isChecked__3pTbR\",\"nameEditor\":\"ColTwo_nameEditor__3q7j3\",\"drag\":\"ColTwo_drag__22hhO\",\"left\":\"ColTwo_left__1f5nn\",\"iconWrapper\":\"ColTwo_iconWrapper__312dt\",\"arrow\":\"ColTwo_arrow__3lzuY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"folderItem\":\"ColOne_folderItem__2tLhO\",\"isDroppable\":\"ColOne_isDroppable__9-sYQ\",\"isOver\":\"ColOne_isOver__1Y2xD\",\"left\":\"ColOne_left__13IKl\",\"name\":\"ColOne_name__2cKUT\",\"isActive\":\"ColOne_isActive__3_yZW\",\"isProject\":\"ColOne_isProject__nRFQe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Board_container__15NyP\",\"row1\":\"Board_row1__1nHv1\",\"row2\":\"Board_row2__TNkut\",\"row3\":\"Board_row3__eGlZY\",\"isShowingKanban\":\"Board_isShowingKanban__1LmZ2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ColumnInner_container__14jds\",\"scrollContents\":\"ColumnInner_scrollContents__2Caoi\",\"bottomContents\":\"ColumnInner_bottomContents__3kxeg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preview\":\"TextEditor_preview__102VY\",\"textArea\":\"TextEditor_textArea__1GovB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preview\":\"MarkdownEditor_preview__3zJyZ\",\"button\":\"MarkdownEditor_button__29LfO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"App_nav__UeHIZ\",\"app\":\"App_app__2ziFi\"};"],"sourceRoot":""}